/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package state;

import "msgs/msgs.proto";

option go_package = "github.com/IBM/mirbft/pkg/pb/state";

// Event represents a state event to be injected into the state machine
message Event {
    oneof type {
        EventInitialParameters initialize = 1;
	EventPersistedEntry load_entry = 2;
	EventLoadCompleted complete_initialization = 3;
        EventActionResults add_results = 4;
        EventClientActionResults add_client_results = 5;
        msgs.CEntry Transfer = 6; // XXX probably wrap this?
        EventInboundMsg step = 7;
	EventTickElapsed tick = 8;
	EventReady actions_received = 9;
	EventReady client_actions_received = 10;
    }
}

message EventInitialParameters {
    uint64 id = 1;
    uint32 batch_size = 2;
    uint32 heartbeat_ticks = 3;
    uint32 suspect_ticks = 4;
    uint32 new_epoch_timeout_ticks = 5;
    uint32 buffer_size = 6;
}

message EventPersistedEntry {
    uint64 index = 1;
    msgs.Persistent data = 2;
}

message EventLoadCompleted {}

message EventActionResults {
    repeated HashResult digests = 1;
    repeated CheckpointResult checkpoints = 2;
}

message EventClientActionResults {
    repeated msgs.RequestAck persisted = 1;
}

message EventInboundMsg {
    uint64 source = 1;
    msgs.Msg msg = 2;
}

message EventTickElapsed {}

message EventReady{}

message Action {
    oneof type {
       ActionSend send = 1;
       ActionHashRequest hash = 2;
       ActionWrite write_ahead = 3;
       ActionCommit commit = 4;
       ActionRequestSlot allocated_request = 5;
       msgs.RequestAck correct_request = 6;
       ActionForward forward_request = 7;
       ActionStateTarget state_transfer = 8;
    }
}

message ActionSend {
    repeated uint64 targets = 1;
    msgs.Msg msg = 2;
}

// Write requires either but not both truncate to be zero,
// data is non-nil iff append is non-zero
message ActionWrite {
    uint64 truncate = 1;
    uint64 append = 2;
    msgs.Persistent data = 3;
}

// Commit either has the batch set, or seq_no,  network_config, and client_state set.
message ActionCommit {
    msgs.QEntry batch = 1;
    uint64 seq_no = 2;
    msgs.NetworkState.Config network_config = 3;
    repeated msgs.NetworkState.Client client_states = 4;
}

message ActionRequestSlot {
    uint64 client_id = 1;
    uint64 req_no = 2;
}

message ActionForward {
    repeated uint64 targets = 1;
    msgs.RequestAck ack = 2;
}

message ActionHashRequest {
    repeated bytes data = 1;
    HashResult origin = 2;
}

message ActionStateTarget {
    uint64 seq_no = 1;
    bytes value = 2;
}

message HashResult {
    message Batch {
        uint64 source = 1;
        uint64 epoch = 2;
        uint64 seq_no = 3;
        repeated msgs.RequestAck request_acks = 5;
    }

    message VerifyBatch { 
        uint64 source = 1;
        uint64 seq_no = 2;
        repeated msgs.RequestAck request_acks = 3;
        bytes expected_digest = 4;
    }

    message EpochChange {
        uint64 source = 1;
        uint64 origin = 2;
        msgs.EpochChange epoch_change = 3;
    }

    bytes digest = 1;
    oneof type {
        Batch batch = 2;
        EpochChange epoch_change = 3;
        VerifyBatch verify_batch = 4;
    }
}

message CheckpointResult {
        uint64 seq_no = 1;
        bytes value = 2;
        msgs.NetworkState network_state = 3;
	bool reconfigured = 4;
}
