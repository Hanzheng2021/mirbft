// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mirbft.proto

package mirbftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NetworkState contains the configuration agreed to by all nodes in the network
// as well as the current client statuses.  NetworkState must be reflected in the
// state digest for checkpoints.  The easiest way to accomplish this is by serializing
// the structure and including it in the application state.  Note, when there are a large
// number of clients, performing a custom serialization may be desirable.
type NetworkState struct {
	Config               *NetworkState_Config   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Clients              []*NetworkState_Client `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NetworkState) Reset()         { *m = NetworkState{} }
func (m *NetworkState) String() string { return proto.CompactTextString(m) }
func (*NetworkState) ProtoMessage()    {}
func (*NetworkState) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{0}
}
func (m *NetworkState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkState.Unmarshal(m, b)
}
func (m *NetworkState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkState.Marshal(b, m, deterministic)
}
func (dst *NetworkState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkState.Merge(dst, src)
}
func (m *NetworkState) XXX_Size() int {
	return xxx_messageInfo_NetworkState.Size(m)
}
func (m *NetworkState) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkState.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkState proto.InternalMessageInfo

func (m *NetworkState) GetConfig() *NetworkState_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NetworkState) GetClients() []*NetworkState_Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type NetworkState_Config struct {
	// Nodes represent the active nodeIDs in the network.
	// The number of nodeIDs corresponds to the size of the network.
	Nodes []uint64 `protobuf:"varint,1,rep,packed,name=nodes,proto3" json:"nodes,omitempty"`
	// CheckpointInterval is how often checkpoints are taken.  In terms of
	// of sequence numbers, this is multiplied by the configured number of
	// buckets, so that it scales naturally as the number of buckets increases
	// or decreases.
	CheckpointInterval int32 `protobuf:"varint,2,opt,name=checkpoint_interval,json=checkpointInterval,proto3" json:"checkpoint_interval,omitempty"`
	// MaxEpochLength is the maximum number of sequence numbers which may preprepare
	// in an epoch.  This is to force bucket rotation even when the system is otherwise
	// in a healthy state.  Setting this value to uint64_max will effectively disable
	// graceful epoch changes.
	MaxEpochLength uint64 `protobuf:"varint,3,opt,name=max_epoch_length,json=maxEpochLength,proto3" json:"max_epoch_length,omitempty"`
	// NumberOfBuckets is the number of buckets the network is configured to operate over.
	// Each bucket is a partition of the request space.  Typically, number of buckets should
	// be nodes * m, where 'm' is some small constant.  Setting this value to 1 effectively
	// reduces Mir to PBFT.
	NumberOfBuckets int32 `protobuf:"varint,4,opt,name=number_of_buckets,json=numberOfBuckets,proto3" json:"number_of_buckets,omitempty"`
	// F is the number of byzantine faults tolerated by the network.
	// It must be less than len(nodes)/3 (truncated).  The 'F' parameter
	// need not be maximal, ie, a network of 9 nodes with 'F' set to 1 may
	// simultaneously tolerate 1 byzantine fault, and 2 crash faults.  Whereas
	// when F=2, that 9 node network may only tolerate 2 crash faults.  Note
	// usually, a maximal value makes sense.  For instance in a network of 7
	// nodes F=1, and F=2 both provide crash tolerance of only 2 nodes.  The
	// following table summarizes the number of crash faults tolerated for
	// a given network of size N and number of byzantine faults tolerated F.
	//
	//    |           F           |
	//    | 0 | 1 | 2 | 3 | 4 | 5 |
	// N --------------------------
	// 1  | 0 |   |   |   |   |   |
	// 2  | 0 |   |   |   |   |   |
	// 3  | 1 |   |   |   |   |   |
	// 4  | 1 | 1 |   |   |   |   |
	// 5  | 2 | 1 |   |   |   |   |
	// 6  | 2 | 1 |   |   |   |   |
	// 7  | 3 | 2 | 2 |   |   |   |
	// 8  | 3 | 3 | 2 |   |   |   |
	// 9  | 4 | 3 | 2 |   |   |   |
	// 10 | 4 | 4 | 3 | 3 |   |   |
	// 11 | 5 | 4 | 4 | 3 |   |   |
	// 12 | 5 | 5 | 4 | 4 |   |   |
	// 13 | 6 | 5 | 5 | 4 | 4 |   |
	// 14 | 6 | 6 | 5 | 5 | 4 |   |
	// 15 | 7 | 6 | 6 | 5 | 5 |   |
	// 16 | 7 | 7 | 6 | 6 | 5 | 5 |
	// 17 | 8 | 7 | 7 | 6 | 6 | 5 |
	F                    int32    `protobuf:"varint,5,opt,name=f,proto3" json:"f,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkState_Config) Reset()         { *m = NetworkState_Config{} }
func (m *NetworkState_Config) String() string { return proto.CompactTextString(m) }
func (*NetworkState_Config) ProtoMessage()    {}
func (*NetworkState_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{0, 0}
}
func (m *NetworkState_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkState_Config.Unmarshal(m, b)
}
func (m *NetworkState_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkState_Config.Marshal(b, m, deterministic)
}
func (dst *NetworkState_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkState_Config.Merge(dst, src)
}
func (m *NetworkState_Config) XXX_Size() int {
	return xxx_messageInfo_NetworkState_Config.Size(m)
}
func (m *NetworkState_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkState_Config.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkState_Config proto.InternalMessageInfo

func (m *NetworkState_Config) GetNodes() []uint64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NetworkState_Config) GetCheckpointInterval() int32 {
	if m != nil {
		return m.CheckpointInterval
	}
	return 0
}

func (m *NetworkState_Config) GetMaxEpochLength() uint64 {
	if m != nil {
		return m.MaxEpochLength
	}
	return 0
}

func (m *NetworkState_Config) GetNumberOfBuckets() int32 {
	if m != nil {
		return m.NumberOfBuckets
	}
	return 0
}

func (m *NetworkState_Config) GetF() int32 {
	if m != nil {
		return m.F
	}
	return 0
}

type NetworkState_Client struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BucketLowWatermarks  []uint64 `protobuf:"varint,2,rep,packed,name=bucket_low_watermarks,json=bucketLowWatermarks,proto3" json:"bucket_low_watermarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkState_Client) Reset()         { *m = NetworkState_Client{} }
func (m *NetworkState_Client) String() string { return proto.CompactTextString(m) }
func (*NetworkState_Client) ProtoMessage()    {}
func (*NetworkState_Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{0, 1}
}
func (m *NetworkState_Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkState_Client.Unmarshal(m, b)
}
func (m *NetworkState_Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkState_Client.Marshal(b, m, deterministic)
}
func (dst *NetworkState_Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkState_Client.Merge(dst, src)
}
func (m *NetworkState_Client) XXX_Size() int {
	return xxx_messageInfo_NetworkState_Client.Size(m)
}
func (m *NetworkState_Client) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkState_Client.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkState_Client proto.InternalMessageInfo

func (m *NetworkState_Client) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NetworkState_Client) GetBucketLowWatermarks() []uint64 {
	if m != nil {
		return m.BucketLowWatermarks
	}
	return nil
}

// Persistent contains data that should be persited by lib user
type Persistent struct {
	// Types that are valid to be assigned to Type:
	//	*Persistent_QEntry
	//	*Persistent_PEntry
	//	*Persistent_CEntry
	//	*Persistent_EpochChange
	//	*Persistent_NewEpochEcho
	//	*Persistent_NewEpochReady
	//	*Persistent_NewEpochStart
	//	*Persistent_Suspect
	Type                 isPersistent_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Persistent) Reset()         { *m = Persistent{} }
func (m *Persistent) String() string { return proto.CompactTextString(m) }
func (*Persistent) ProtoMessage()    {}
func (*Persistent) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{1}
}
func (m *Persistent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Persistent.Unmarshal(m, b)
}
func (m *Persistent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Persistent.Marshal(b, m, deterministic)
}
func (dst *Persistent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Persistent.Merge(dst, src)
}
func (m *Persistent) XXX_Size() int {
	return xxx_messageInfo_Persistent.Size(m)
}
func (m *Persistent) XXX_DiscardUnknown() {
	xxx_messageInfo_Persistent.DiscardUnknown(m)
}

var xxx_messageInfo_Persistent proto.InternalMessageInfo

type isPersistent_Type interface {
	isPersistent_Type()
}

type Persistent_QEntry struct {
	QEntry *QEntry `protobuf:"bytes,1,opt,name=q_entry,json=qEntry,proto3,oneof"`
}

type Persistent_PEntry struct {
	PEntry *PEntry `protobuf:"bytes,2,opt,name=p_entry,json=pEntry,proto3,oneof"`
}

type Persistent_CEntry struct {
	CEntry *CEntry `protobuf:"bytes,3,opt,name=c_entry,json=cEntry,proto3,oneof"`
}

type Persistent_EpochChange struct {
	EpochChange *EpochChange `protobuf:"bytes,4,opt,name=epoch_change,json=epochChange,proto3,oneof"`
}

type Persistent_NewEpochEcho struct {
	NewEpochEcho *NewEpochConfig `protobuf:"bytes,5,opt,name=new_epoch_echo,json=newEpochEcho,proto3,oneof"`
}

type Persistent_NewEpochReady struct {
	NewEpochReady *NewEpochConfig `protobuf:"bytes,6,opt,name=new_epoch_ready,json=newEpochReady,proto3,oneof"`
}

type Persistent_NewEpochStart struct {
	NewEpochStart *EpochConfig `protobuf:"bytes,7,opt,name=new_epoch_start,json=newEpochStart,proto3,oneof"`
}

type Persistent_Suspect struct {
	Suspect *Suspect `protobuf:"bytes,8,opt,name=suspect,proto3,oneof"`
}

func (*Persistent_QEntry) isPersistent_Type() {}

func (*Persistent_PEntry) isPersistent_Type() {}

func (*Persistent_CEntry) isPersistent_Type() {}

func (*Persistent_EpochChange) isPersistent_Type() {}

func (*Persistent_NewEpochEcho) isPersistent_Type() {}

func (*Persistent_NewEpochReady) isPersistent_Type() {}

func (*Persistent_NewEpochStart) isPersistent_Type() {}

func (*Persistent_Suspect) isPersistent_Type() {}

func (m *Persistent) GetType() isPersistent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Persistent) GetQEntry() *QEntry {
	if x, ok := m.GetType().(*Persistent_QEntry); ok {
		return x.QEntry
	}
	return nil
}

func (m *Persistent) GetPEntry() *PEntry {
	if x, ok := m.GetType().(*Persistent_PEntry); ok {
		return x.PEntry
	}
	return nil
}

func (m *Persistent) GetCEntry() *CEntry {
	if x, ok := m.GetType().(*Persistent_CEntry); ok {
		return x.CEntry
	}
	return nil
}

func (m *Persistent) GetEpochChange() *EpochChange {
	if x, ok := m.GetType().(*Persistent_EpochChange); ok {
		return x.EpochChange
	}
	return nil
}

func (m *Persistent) GetNewEpochEcho() *NewEpochConfig {
	if x, ok := m.GetType().(*Persistent_NewEpochEcho); ok {
		return x.NewEpochEcho
	}
	return nil
}

func (m *Persistent) GetNewEpochReady() *NewEpochConfig {
	if x, ok := m.GetType().(*Persistent_NewEpochReady); ok {
		return x.NewEpochReady
	}
	return nil
}

func (m *Persistent) GetNewEpochStart() *EpochConfig {
	if x, ok := m.GetType().(*Persistent_NewEpochStart); ok {
		return x.NewEpochStart
	}
	return nil
}

func (m *Persistent) GetSuspect() *Suspect {
	if x, ok := m.GetType().(*Persistent_Suspect); ok {
		return x.Suspect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Persistent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Persistent_OneofMarshaler, _Persistent_OneofUnmarshaler, _Persistent_OneofSizer, []interface{}{
		(*Persistent_QEntry)(nil),
		(*Persistent_PEntry)(nil),
		(*Persistent_CEntry)(nil),
		(*Persistent_EpochChange)(nil),
		(*Persistent_NewEpochEcho)(nil),
		(*Persistent_NewEpochReady)(nil),
		(*Persistent_NewEpochStart)(nil),
		(*Persistent_Suspect)(nil),
	}
}

func _Persistent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Persistent)
	// type
	switch x := m.Type.(type) {
	case *Persistent_QEntry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QEntry); err != nil {
			return err
		}
	case *Persistent_PEntry:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PEntry); err != nil {
			return err
		}
	case *Persistent_CEntry:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CEntry); err != nil {
			return err
		}
	case *Persistent_EpochChange:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChange); err != nil {
			return err
		}
	case *Persistent_NewEpochEcho:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochEcho); err != nil {
			return err
		}
	case *Persistent_NewEpochReady:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochReady); err != nil {
			return err
		}
	case *Persistent_NewEpochStart:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochStart); err != nil {
			return err
		}
	case *Persistent_Suspect:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Suspect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Persistent.Type has unexpected type %T", x)
	}
	return nil
}

func _Persistent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Persistent)
	switch tag {
	case 1: // type.q_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QEntry)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_QEntry{msg}
		return true, err
	case 2: // type.p_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PEntry)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_PEntry{msg}
		return true, err
	case 3: // type.c_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CEntry)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_CEntry{msg}
		return true, err
	case 4: // type.epoch_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochChange)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_EpochChange{msg}
		return true, err
	case 5: // type.new_epoch_echo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochConfig)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_NewEpochEcho{msg}
		return true, err
	case 6: // type.new_epoch_ready
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochConfig)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_NewEpochReady{msg}
		return true, err
	case 7: // type.new_epoch_start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochConfig)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_NewEpochStart{msg}
		return true, err
	case 8: // type.suspect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Suspect)
		err := b.DecodeMessage(msg)
		m.Type = &Persistent_Suspect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Persistent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Persistent)
	// type
	switch x := m.Type.(type) {
	case *Persistent_QEntry:
		s := proto.Size(x.QEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_PEntry:
		s := proto.Size(x.PEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_CEntry:
		s := proto.Size(x.CEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_EpochChange:
		s := proto.Size(x.EpochChange)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_NewEpochEcho:
		s := proto.Size(x.NewEpochEcho)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_NewEpochReady:
		s := proto.Size(x.NewEpochReady)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_NewEpochStart:
		s := proto.Size(x.NewEpochStart)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Persistent_Suspect:
		s := proto.Size(x.Suspect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// QEntry is an entry which must be persisted before a batch is Preprepared (ie,
// before a Preprepare or Prepare message is sent).
type QEntry struct {
	SeqNo                uint64            `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest               []byte            `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Requests             []*ForwardRequest `protobuf:"bytes,4,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QEntry) Reset()         { *m = QEntry{} }
func (m *QEntry) String() string { return proto.CompactTextString(m) }
func (*QEntry) ProtoMessage()    {}
func (*QEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{2}
}
func (m *QEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QEntry.Unmarshal(m, b)
}
func (m *QEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QEntry.Marshal(b, m, deterministic)
}
func (dst *QEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QEntry.Merge(dst, src)
}
func (m *QEntry) XXX_Size() int {
	return xxx_messageInfo_QEntry.Size(m)
}
func (m *QEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QEntry proto.InternalMessageInfo

func (m *QEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *QEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *QEntry) GetRequests() []*ForwardRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// PEntry is an entry which must be persisted before a batch is Prepared (ie,
// before a Commit message is sent).
type PEntry struct {
	SeqNo                uint64   `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PEntry) Reset()         { *m = PEntry{} }
func (m *PEntry) String() string { return proto.CompactTextString(m) }
func (*PEntry) ProtoMessage()    {}
func (*PEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{3}
}
func (m *PEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PEntry.Unmarshal(m, b)
}
func (m *PEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PEntry.Marshal(b, m, deterministic)
}
func (dst *PEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PEntry.Merge(dst, src)
}
func (m *PEntry) XXX_Size() int {
	return xxx_messageInfo_PEntry.Size(m)
}
func (m *PEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PEntry proto.InternalMessageInfo

func (m *PEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *PEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// CEntry is an entry which must be persisted before a Checkpoint message is sent.
type CEntry struct {
	SeqNo                uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CheckpointValue      []byte        `protobuf:"bytes,2,opt,name=checkpoint_value,json=checkpointValue,proto3" json:"checkpoint_value,omitempty"`
	NetworkState         *NetworkState `protobuf:"bytes,3,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
	EpochConfig          *EpochConfig  `protobuf:"bytes,4,opt,name=epoch_config,json=epochConfig,proto3" json:"epoch_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CEntry) Reset()         { *m = CEntry{} }
func (m *CEntry) String() string { return proto.CompactTextString(m) }
func (*CEntry) ProtoMessage()    {}
func (*CEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{4}
}
func (m *CEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CEntry.Unmarshal(m, b)
}
func (m *CEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CEntry.Marshal(b, m, deterministic)
}
func (dst *CEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CEntry.Merge(dst, src)
}
func (m *CEntry) XXX_Size() int {
	return xxx_messageInfo_CEntry.Size(m)
}
func (m *CEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CEntry proto.InternalMessageInfo

func (m *CEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *CEntry) GetCheckpointValue() []byte {
	if m != nil {
		return m.CheckpointValue
	}
	return nil
}

func (m *CEntry) GetNetworkState() *NetworkState {
	if m != nil {
		return m.NetworkState
	}
	return nil
}

func (m *CEntry) GetEpochConfig() *EpochConfig {
	if m != nil {
		return m.EpochConfig
	}
	return nil
}

type Msg struct {
	// Types that are valid to be assigned to Type:
	//	*Msg_Preprepare
	//	*Msg_Prepare
	//	*Msg_Commit
	//	*Msg_Checkpoint
	//	*Msg_Suspect
	//	*Msg_EpochChange
	//	*Msg_EpochChangeAck
	//	*Msg_NewEpoch
	//	*Msg_NewEpochEcho
	//	*Msg_NewEpochReady
	//	*Msg_FetchBatch
	//	*Msg_ForwardBatch
	//	*Msg_FetchRequest
	//	*Msg_ForwardRequest
	//	*Msg_RequestAck
	Type                 isMsg_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{5}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (dst *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(dst, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Type interface {
	isMsg_Type()
}

type Msg_Preprepare struct {
	Preprepare *Preprepare `protobuf:"bytes,1,opt,name=preprepare,proto3,oneof"`
}

type Msg_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,2,opt,name=prepare,proto3,oneof"`
}

type Msg_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Msg_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,4,opt,name=checkpoint,proto3,oneof"`
}

type Msg_Suspect struct {
	Suspect *Suspect `protobuf:"bytes,5,opt,name=suspect,proto3,oneof"`
}

type Msg_EpochChange struct {
	EpochChange *EpochChange `protobuf:"bytes,6,opt,name=epoch_change,json=epochChange,proto3,oneof"`
}

type Msg_EpochChangeAck struct {
	EpochChangeAck *EpochChangeAck `protobuf:"bytes,7,opt,name=epoch_change_ack,json=epochChangeAck,proto3,oneof"`
}

type Msg_NewEpoch struct {
	NewEpoch *NewEpoch `protobuf:"bytes,8,opt,name=new_epoch,json=newEpoch,proto3,oneof"`
}

type Msg_NewEpochEcho struct {
	NewEpochEcho *NewEpochEcho `protobuf:"bytes,9,opt,name=new_epoch_echo,json=newEpochEcho,proto3,oneof"`
}

type Msg_NewEpochReady struct {
	NewEpochReady *NewEpochReady `protobuf:"bytes,10,opt,name=new_epoch_ready,json=newEpochReady,proto3,oneof"`
}

type Msg_FetchBatch struct {
	FetchBatch *FetchBatch `protobuf:"bytes,11,opt,name=fetch_batch,json=fetchBatch,proto3,oneof"`
}

type Msg_ForwardBatch struct {
	ForwardBatch *ForwardBatch `protobuf:"bytes,12,opt,name=forward_batch,json=forwardBatch,proto3,oneof"`
}

type Msg_FetchRequest struct {
	FetchRequest *RequestAck `protobuf:"bytes,13,opt,name=fetch_request,json=fetchRequest,proto3,oneof"`
}

type Msg_ForwardRequest struct {
	ForwardRequest *ForwardRequest `protobuf:"bytes,14,opt,name=forward_request,json=forwardRequest,proto3,oneof"`
}

type Msg_RequestAck struct {
	RequestAck *RequestAck `protobuf:"bytes,15,opt,name=request_ack,json=requestAck,proto3,oneof"`
}

func (*Msg_Preprepare) isMsg_Type() {}

func (*Msg_Prepare) isMsg_Type() {}

func (*Msg_Commit) isMsg_Type() {}

func (*Msg_Checkpoint) isMsg_Type() {}

func (*Msg_Suspect) isMsg_Type() {}

func (*Msg_EpochChange) isMsg_Type() {}

func (*Msg_EpochChangeAck) isMsg_Type() {}

func (*Msg_NewEpoch) isMsg_Type() {}

func (*Msg_NewEpochEcho) isMsg_Type() {}

func (*Msg_NewEpochReady) isMsg_Type() {}

func (*Msg_FetchBatch) isMsg_Type() {}

func (*Msg_ForwardBatch) isMsg_Type() {}

func (*Msg_FetchRequest) isMsg_Type() {}

func (*Msg_ForwardRequest) isMsg_Type() {}

func (*Msg_RequestAck) isMsg_Type() {}

func (m *Msg) GetType() isMsg_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Msg) GetPreprepare() *Preprepare {
	if x, ok := m.GetType().(*Msg_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *Msg) GetPrepare() *Prepare {
	if x, ok := m.GetType().(*Msg_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Msg) GetCommit() *Commit {
	if x, ok := m.GetType().(*Msg_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Msg) GetCheckpoint() *Checkpoint {
	if x, ok := m.GetType().(*Msg_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Msg) GetSuspect() *Suspect {
	if x, ok := m.GetType().(*Msg_Suspect); ok {
		return x.Suspect
	}
	return nil
}

func (m *Msg) GetEpochChange() *EpochChange {
	if x, ok := m.GetType().(*Msg_EpochChange); ok {
		return x.EpochChange
	}
	return nil
}

func (m *Msg) GetEpochChangeAck() *EpochChangeAck {
	if x, ok := m.GetType().(*Msg_EpochChangeAck); ok {
		return x.EpochChangeAck
	}
	return nil
}

func (m *Msg) GetNewEpoch() *NewEpoch {
	if x, ok := m.GetType().(*Msg_NewEpoch); ok {
		return x.NewEpoch
	}
	return nil
}

func (m *Msg) GetNewEpochEcho() *NewEpochEcho {
	if x, ok := m.GetType().(*Msg_NewEpochEcho); ok {
		return x.NewEpochEcho
	}
	return nil
}

func (m *Msg) GetNewEpochReady() *NewEpochReady {
	if x, ok := m.GetType().(*Msg_NewEpochReady); ok {
		return x.NewEpochReady
	}
	return nil
}

func (m *Msg) GetFetchBatch() *FetchBatch {
	if x, ok := m.GetType().(*Msg_FetchBatch); ok {
		return x.FetchBatch
	}
	return nil
}

func (m *Msg) GetForwardBatch() *ForwardBatch {
	if x, ok := m.GetType().(*Msg_ForwardBatch); ok {
		return x.ForwardBatch
	}
	return nil
}

func (m *Msg) GetFetchRequest() *RequestAck {
	if x, ok := m.GetType().(*Msg_FetchRequest); ok {
		return x.FetchRequest
	}
	return nil
}

func (m *Msg) GetForwardRequest() *ForwardRequest {
	if x, ok := m.GetType().(*Msg_ForwardRequest); ok {
		return x.ForwardRequest
	}
	return nil
}

func (m *Msg) GetRequestAck() *RequestAck {
	if x, ok := m.GetType().(*Msg_RequestAck); ok {
		return x.RequestAck
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Msg_OneofMarshaler, _Msg_OneofUnmarshaler, _Msg_OneofSizer, []interface{}{
		(*Msg_Preprepare)(nil),
		(*Msg_Prepare)(nil),
		(*Msg_Commit)(nil),
		(*Msg_Checkpoint)(nil),
		(*Msg_Suspect)(nil),
		(*Msg_EpochChange)(nil),
		(*Msg_EpochChangeAck)(nil),
		(*Msg_NewEpoch)(nil),
		(*Msg_NewEpochEcho)(nil),
		(*Msg_NewEpochReady)(nil),
		(*Msg_FetchBatch)(nil),
		(*Msg_ForwardBatch)(nil),
		(*Msg_FetchRequest)(nil),
		(*Msg_ForwardRequest)(nil),
		(*Msg_RequestAck)(nil),
	}
}

func _Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *Msg_Prepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Msg_Commit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Msg_Checkpoint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Msg_Suspect:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Suspect); err != nil {
			return err
		}
	case *Msg_EpochChange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChange); err != nil {
			return err
		}
	case *Msg_EpochChangeAck:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChangeAck); err != nil {
			return err
		}
	case *Msg_NewEpoch:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpoch); err != nil {
			return err
		}
	case *Msg_NewEpochEcho:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochEcho); err != nil {
			return err
		}
	case *Msg_NewEpochReady:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewEpochReady); err != nil {
			return err
		}
	case *Msg_FetchBatch:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchBatch); err != nil {
			return err
		}
	case *Msg_ForwardBatch:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardBatch); err != nil {
			return err
		}
	case *Msg_FetchRequest:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchRequest); err != nil {
			return err
		}
	case *Msg_ForwardRequest:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardRequest); err != nil {
			return err
		}
	case *Msg_RequestAck:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestAck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Msg.Type has unexpected type %T", x)
	}
	return nil
}

func _Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Msg)
	switch tag {
	case 1: // type.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Preprepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Preprepare{msg}
		return true, err
	case 2: // type.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Prepare{msg}
		return true, err
	case 3: // type.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Commit{msg}
		return true, err
	case 4: // type.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Checkpoint)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Checkpoint{msg}
		return true, err
	case 5: // type.suspect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Suspect)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_Suspect{msg}
		return true, err
	case 6: // type.epoch_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochChange)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_EpochChange{msg}
		return true, err
	case 7: // type.epoch_change_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochChangeAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_EpochChangeAck{msg}
		return true, err
	case 8: // type.new_epoch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpoch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpoch{msg}
		return true, err
	case 9: // type.new_epoch_echo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochEcho)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpochEcho{msg}
		return true, err
	case 10: // type.new_epoch_ready
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewEpochReady)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_NewEpochReady{msg}
		return true, err
	case 11: // type.fetch_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchBatch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_FetchBatch{msg}
		return true, err
	case 12: // type.forward_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardBatch)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_ForwardBatch{msg}
		return true, err
	case 13: // type.fetch_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_FetchRequest{msg}
		return true, err
	case 14: // type.forward_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardRequest)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_ForwardRequest{msg}
		return true, err
	case 15: // type.request_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Type = &Msg_RequestAck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Msg)
	// type
	switch x := m.Type.(type) {
	case *Msg_Preprepare:
		s := proto.Size(x.Preprepare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Prepare:
		s := proto.Size(x.Prepare)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Commit:
		s := proto.Size(x.Commit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Suspect:
		s := proto.Size(x.Suspect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_EpochChange:
		s := proto.Size(x.EpochChange)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_EpochChangeAck:
		s := proto.Size(x.EpochChangeAck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpoch:
		s := proto.Size(x.NewEpoch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpochEcho:
		s := proto.Size(x.NewEpochEcho)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NewEpochReady:
		s := proto.Size(x.NewEpochReady)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_FetchBatch:
		s := proto.Size(x.FetchBatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_ForwardBatch:
		s := proto.Size(x.ForwardBatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_FetchRequest:
		s := proto.Size(x.FetchRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_ForwardRequest:
		s := proto.Size(x.ForwardRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_RequestAck:
		s := proto.Size(x.RequestAck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FetchBatch struct {
	SeqNo                uint64   `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest               []byte   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchBatch) Reset()         { *m = FetchBatch{} }
func (m *FetchBatch) String() string { return proto.CompactTextString(m) }
func (*FetchBatch) ProtoMessage()    {}
func (*FetchBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{6}
}
func (m *FetchBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchBatch.Unmarshal(m, b)
}
func (m *FetchBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchBatch.Marshal(b, m, deterministic)
}
func (dst *FetchBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchBatch.Merge(dst, src)
}
func (m *FetchBatch) XXX_Size() int {
	return xxx_messageInfo_FetchBatch.Size(m)
}
func (m *FetchBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchBatch.DiscardUnknown(m)
}

var xxx_messageInfo_FetchBatch proto.InternalMessageInfo

func (m *FetchBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *FetchBatch) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type ForwardBatch struct {
	SeqNo                uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks          []*RequestAck `protobuf:"bytes,2,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
	Digest               []byte        `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ForwardBatch) Reset()         { *m = ForwardBatch{} }
func (m *ForwardBatch) String() string { return proto.CompactTextString(m) }
func (*ForwardBatch) ProtoMessage()    {}
func (*ForwardBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{7}
}
func (m *ForwardBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardBatch.Unmarshal(m, b)
}
func (m *ForwardBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardBatch.Marshal(b, m, deterministic)
}
func (dst *ForwardBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardBatch.Merge(dst, src)
}
func (m *ForwardBatch) XXX_Size() int {
	return xxx_messageInfo_ForwardBatch.Size(m)
}
func (m *ForwardBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardBatch proto.InternalMessageInfo

func (m *ForwardBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *ForwardBatch) GetRequestAcks() []*RequestAck {
	if m != nil {
		return m.RequestAcks
	}
	return nil
}

func (m *ForwardBatch) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type ForwardRequest struct {
	Request              *Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Digest               []byte   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardRequest) Reset()         { *m = ForwardRequest{} }
func (m *ForwardRequest) String() string { return proto.CompactTextString(m) }
func (*ForwardRequest) ProtoMessage()    {}
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{8}
}
func (m *ForwardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardRequest.Unmarshal(m, b)
}
func (m *ForwardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardRequest.Marshal(b, m, deterministic)
}
func (dst *ForwardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardRequest.Merge(dst, src)
}
func (m *ForwardRequest) XXX_Size() int {
	return xxx_messageInfo_ForwardRequest.Size(m)
}
func (m *ForwardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardRequest proto.InternalMessageInfo

func (m *ForwardRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ForwardRequest) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Request struct {
	ClientId             uint64   `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo                uint64   `protobuf:"varint,2,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{9}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Request) GetReqNo() uint64 {
	if m != nil {
		return m.ReqNo
	}
	return 0
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestAck struct {
	ClientId             uint64   `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqNo                uint64   `protobuf:"varint,2,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestAck) Reset()         { *m = RequestAck{} }
func (m *RequestAck) String() string { return proto.CompactTextString(m) }
func (*RequestAck) ProtoMessage()    {}
func (*RequestAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{10}
}
func (m *RequestAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestAck.Unmarshal(m, b)
}
func (m *RequestAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestAck.Marshal(b, m, deterministic)
}
func (dst *RequestAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAck.Merge(dst, src)
}
func (m *RequestAck) XXX_Size() int {
	return xxx_messageInfo_RequestAck.Size(m)
}
func (m *RequestAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAck.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAck proto.InternalMessageInfo

func (m *RequestAck) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *RequestAck) GetReqNo() uint64 {
	if m != nil {
		return m.ReqNo
	}
	return 0
}

func (m *RequestAck) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Preprepare struct {
	SeqNo                uint64        `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch                uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Batch                []*RequestAck `protobuf:"bytes,3,rep,name=batch,proto3" json:"batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Preprepare) Reset()         { *m = Preprepare{} }
func (m *Preprepare) String() string { return proto.CompactTextString(m) }
func (*Preprepare) ProtoMessage()    {}
func (*Preprepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{11}
}
func (m *Preprepare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Preprepare.Unmarshal(m, b)
}
func (m *Preprepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Preprepare.Marshal(b, m, deterministic)
}
func (dst *Preprepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Preprepare.Merge(dst, src)
}
func (m *Preprepare) XXX_Size() int {
	return xxx_messageInfo_Preprepare.Size(m)
}
func (m *Preprepare) XXX_DiscardUnknown() {
	xxx_messageInfo_Preprepare.DiscardUnknown(m)
}

var xxx_messageInfo_Preprepare proto.InternalMessageInfo

func (m *Preprepare) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Preprepare) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Preprepare) GetBatch() []*RequestAck {
	if m != nil {
		return m.Batch
	}
	return nil
}

type Prepare struct {
	SeqNo                uint64   `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Prepare) Reset()         { *m = Prepare{} }
func (m *Prepare) String() string { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()    {}
func (*Prepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{12}
}
func (m *Prepare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Prepare.Unmarshal(m, b)
}
func (m *Prepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Prepare.Marshal(b, m, deterministic)
}
func (dst *Prepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prepare.Merge(dst, src)
}
func (m *Prepare) XXX_Size() int {
	return xxx_messageInfo_Prepare.Size(m)
}
func (m *Prepare) XXX_DiscardUnknown() {
	xxx_messageInfo_Prepare.DiscardUnknown(m)
}

var xxx_messageInfo_Prepare proto.InternalMessageInfo

func (m *Prepare) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Prepare) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Prepare) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Commit struct {
	SeqNo                uint64   `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}
func (*Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{13}
}
func (m *Commit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Commit.Unmarshal(m, b)
}
func (m *Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Commit.Marshal(b, m, deterministic)
}
func (dst *Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commit.Merge(dst, src)
}
func (m *Commit) XXX_Size() int {
	return xxx_messageInfo_Commit.Size(m)
}
func (m *Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_Commit proto.InternalMessageInfo

func (m *Commit) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Commit) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Commit) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Checkpoint struct {
	SeqNo                uint64   `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{14}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Checkpoint.Unmarshal(m, b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
}
func (dst *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(dst, src)
}
func (m *Checkpoint) XXX_Size() int {
	return xxx_messageInfo_Checkpoint.Size(m)
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Checkpoint) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Suspect struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Suspect) Reset()         { *m = Suspect{} }
func (m *Suspect) String() string { return proto.CompactTextString(m) }
func (*Suspect) ProtoMessage()    {}
func (*Suspect) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{15}
}
func (m *Suspect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Suspect.Unmarshal(m, b)
}
func (m *Suspect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Suspect.Marshal(b, m, deterministic)
}
func (dst *Suspect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suspect.Merge(dst, src)
}
func (m *Suspect) XXX_Size() int {
	return xxx_messageInfo_Suspect.Size(m)
}
func (m *Suspect) XXX_DiscardUnknown() {
	xxx_messageInfo_Suspect.DiscardUnknown(m)
}

var xxx_messageInfo_Suspect proto.InternalMessageInfo

func (m *Suspect) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// EpochChange messages are used to implement the classical PBFT view-change
// protocol, (very) slightly modified to adapt to Mir.  The assorted sets
// are encoded as repeated fields, rather than as maps for ease of serialization
// and particularly for computing a digest to attest to.  If any set contains
// a duplicated entry, the message may be discarded as byzantine.
type EpochChange struct {
	NewEpoch uint64 `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch,proto3" json:"new_epoch,omitempty"`
	// c_set contains the entries for the C-set as defined by the classical
	// PBFT view-change protocol.
	Checkpoints []*Checkpoint `protobuf:"bytes,2,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
	// p_set contains the entries for the P-set as defined by the classical
	// PBFT view-change protocol.
	PSet []*EpochChange_SetEntry `protobuf:"bytes,3,rep,name=p_set,json=pSet,proto3" json:"p_set,omitempty"`
	// q_set contains the entries for the Q-set as defined by the classical
	// PBFT view-change protocol.
	QSet                 []*EpochChange_SetEntry `protobuf:"bytes,4,rep,name=q_set,json=qSet,proto3" json:"q_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EpochChange) Reset()         { *m = EpochChange{} }
func (m *EpochChange) String() string { return proto.CompactTextString(m) }
func (*EpochChange) ProtoMessage()    {}
func (*EpochChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{16}
}
func (m *EpochChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpochChange.Unmarshal(m, b)
}
func (m *EpochChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpochChange.Marshal(b, m, deterministic)
}
func (dst *EpochChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChange.Merge(dst, src)
}
func (m *EpochChange) XXX_Size() int {
	return xxx_messageInfo_EpochChange.Size(m)
}
func (m *EpochChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChange.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChange proto.InternalMessageInfo

func (m *EpochChange) GetNewEpoch() uint64 {
	if m != nil {
		return m.NewEpoch
	}
	return 0
}

func (m *EpochChange) GetCheckpoints() []*Checkpoint {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

func (m *EpochChange) GetPSet() []*EpochChange_SetEntry {
	if m != nil {
		return m.PSet
	}
	return nil
}

func (m *EpochChange) GetQSet() []*EpochChange_SetEntry {
	if m != nil {
		return m.QSet
	}
	return nil
}

type EpochChange_SetEntry struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNo                uint64   `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EpochChange_SetEntry) Reset()         { *m = EpochChange_SetEntry{} }
func (m *EpochChange_SetEntry) String() string { return proto.CompactTextString(m) }
func (*EpochChange_SetEntry) ProtoMessage()    {}
func (*EpochChange_SetEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{16, 0}
}
func (m *EpochChange_SetEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpochChange_SetEntry.Unmarshal(m, b)
}
func (m *EpochChange_SetEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpochChange_SetEntry.Marshal(b, m, deterministic)
}
func (dst *EpochChange_SetEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChange_SetEntry.Merge(dst, src)
}
func (m *EpochChange_SetEntry) XXX_Size() int {
	return xxx_messageInfo_EpochChange_SetEntry.Size(m)
}
func (m *EpochChange_SetEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChange_SetEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChange_SetEntry proto.InternalMessageInfo

func (m *EpochChange_SetEntry) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *EpochChange_SetEntry) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *EpochChange_SetEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// EpochChangeAck messages are broadcast in response to receiving a valid epoch change
// from a replica.  Replicas collect these epoch change ack messages, and when there are 2f+1
// such messages begin to count that epoch change as appropriately broadcast for purposes of
// the epoch change timer.
type EpochChangeAck struct {
	Originator uint64 `protobuf:"varint,1,opt,name=originator,proto3" json:"originator,omitempty"`
	// epoch_change is included fully instead of echo-ing the digest as suggested by the original
	// PBFT paper.  This is purely to prevent requiring a separate fetch step for missing epoch change
	// requests.  Although this is slightly heavier, because ungraceful epoch change is not a performance
	// optimal path, the simplification seems worthwhile.
	EpochChange          *EpochChange `protobuf:"bytes,2,opt,name=epoch_change,json=epochChange,proto3" json:"epoch_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EpochChangeAck) Reset()         { *m = EpochChangeAck{} }
func (m *EpochChangeAck) String() string { return proto.CompactTextString(m) }
func (*EpochChangeAck) ProtoMessage()    {}
func (*EpochChangeAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{17}
}
func (m *EpochChangeAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpochChangeAck.Unmarshal(m, b)
}
func (m *EpochChangeAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpochChangeAck.Marshal(b, m, deterministic)
}
func (dst *EpochChangeAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChangeAck.Merge(dst, src)
}
func (m *EpochChangeAck) XXX_Size() int {
	return xxx_messageInfo_EpochChangeAck.Size(m)
}
func (m *EpochChangeAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChangeAck.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChangeAck proto.InternalMessageInfo

func (m *EpochChangeAck) GetOriginator() uint64 {
	if m != nil {
		return m.Originator
	}
	return 0
}

func (m *EpochChangeAck) GetEpochChange() *EpochChange {
	if m != nil {
		return m.EpochChange
	}
	return nil
}

type EpochConfig struct {
	// number of this new epoch
	Number               uint64   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Leaders              []uint64 `protobuf:"varint,2,rep,packed,name=leaders,proto3" json:"leaders,omitempty"`
	PlannedExpiration    uint64   `protobuf:"varint,3,opt,name=planned_expiration,json=plannedExpiration,proto3" json:"planned_expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EpochConfig) Reset()         { *m = EpochConfig{} }
func (m *EpochConfig) String() string { return proto.CompactTextString(m) }
func (*EpochConfig) ProtoMessage()    {}
func (*EpochConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{18}
}
func (m *EpochConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpochConfig.Unmarshal(m, b)
}
func (m *EpochConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpochConfig.Marshal(b, m, deterministic)
}
func (dst *EpochConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochConfig.Merge(dst, src)
}
func (m *EpochConfig) XXX_Size() int {
	return xxx_messageInfo_EpochConfig.Size(m)
}
func (m *EpochConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EpochConfig proto.InternalMessageInfo

func (m *EpochConfig) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *EpochConfig) GetLeaders() []uint64 {
	if m != nil {
		return m.Leaders
	}
	return nil
}

func (m *EpochConfig) GetPlannedExpiration() uint64 {
	if m != nil {
		return m.PlannedExpiration
	}
	return 0
}

type NewEpochConfig struct {
	Config             *EpochConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	StartingCheckpoint *Checkpoint  `protobuf:"bytes,2,opt,name=starting_checkpoint,json=startingCheckpoint,proto3" json:"starting_checkpoint,omitempty"`
	// final_preprepares finalizes the last checkpoint window or windows
	// which some correct replica preprepared a sequence in. The entries are
	// digests indexed by sequence number offset by the starting_checkpoint
	// seq_no. An empty digest corresponds to a null request.
	FinalPreprepares     [][]byte `protobuf:"bytes,3,rep,name=final_preprepares,json=finalPreprepares,proto3" json:"final_preprepares,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewEpochConfig) Reset()         { *m = NewEpochConfig{} }
func (m *NewEpochConfig) String() string { return proto.CompactTextString(m) }
func (*NewEpochConfig) ProtoMessage()    {}
func (*NewEpochConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{19}
}
func (m *NewEpochConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEpochConfig.Unmarshal(m, b)
}
func (m *NewEpochConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEpochConfig.Marshal(b, m, deterministic)
}
func (dst *NewEpochConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpochConfig.Merge(dst, src)
}
func (m *NewEpochConfig) XXX_Size() int {
	return xxx_messageInfo_NewEpochConfig.Size(m)
}
func (m *NewEpochConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpochConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpochConfig proto.InternalMessageInfo

func (m *NewEpochConfig) GetConfig() *EpochConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NewEpochConfig) GetStartingCheckpoint() *Checkpoint {
	if m != nil {
		return m.StartingCheckpoint
	}
	return nil
}

func (m *NewEpochConfig) GetFinalPreprepares() [][]byte {
	if m != nil {
		return m.FinalPreprepares
	}
	return nil
}

// NewEpoch is akin to the NewView message in classical PBFT and follows the same
// semantics.  Optionally, for graceful epoch change, the epoch_changes field may
// be empty.  In the event that the previous epoch does not complete gracefully,
// the graceful NewEpoch is ignored.  Unlike in classical PBFT, we employ a classical
// Bracha reliable broadcast on embedded config.  A replica should respond to a NewEpoch
// message with a NewEpochEcho (assuming that the NewEpoch message is validly constructed).
type NewEpoch struct {
	NewConfig *NewEpochConfig `protobuf:"bytes,1,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
	// epoch_changes must contains at least 2f+1 EpochChange messages references from
	// replicas in the network.  If two EpochChanges references originated from the same
	// replica, then the NewEpoch message is invalid.
	EpochChanges         []*NewEpoch_RemoteEpochChange `protobuf:"bytes,2,rep,name=epoch_changes,json=epochChanges,proto3" json:"epoch_changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *NewEpoch) Reset()         { *m = NewEpoch{} }
func (m *NewEpoch) String() string { return proto.CompactTextString(m) }
func (*NewEpoch) ProtoMessage()    {}
func (*NewEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{20}
}
func (m *NewEpoch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEpoch.Unmarshal(m, b)
}
func (m *NewEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEpoch.Marshal(b, m, deterministic)
}
func (dst *NewEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpoch.Merge(dst, src)
}
func (m *NewEpoch) XXX_Size() int {
	return xxx_messageInfo_NewEpoch.Size(m)
}
func (m *NewEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpoch proto.InternalMessageInfo

func (m *NewEpoch) GetNewConfig() *NewEpochConfig {
	if m != nil {
		return m.NewConfig
	}
	return nil
}

func (m *NewEpoch) GetEpochChanges() []*NewEpoch_RemoteEpochChange {
	if m != nil {
		return m.EpochChanges
	}
	return nil
}

type NewEpoch_RemoteEpochChange struct {
	NodeId               uint64   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Digest               []byte   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewEpoch_RemoteEpochChange) Reset()         { *m = NewEpoch_RemoteEpochChange{} }
func (m *NewEpoch_RemoteEpochChange) String() string { return proto.CompactTextString(m) }
func (*NewEpoch_RemoteEpochChange) ProtoMessage()    {}
func (*NewEpoch_RemoteEpochChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{20, 0}
}
func (m *NewEpoch_RemoteEpochChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEpoch_RemoteEpochChange.Unmarshal(m, b)
}
func (m *NewEpoch_RemoteEpochChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEpoch_RemoteEpochChange.Marshal(b, m, deterministic)
}
func (dst *NewEpoch_RemoteEpochChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpoch_RemoteEpochChange.Merge(dst, src)
}
func (m *NewEpoch_RemoteEpochChange) XXX_Size() int {
	return xxx_messageInfo_NewEpoch_RemoteEpochChange.Size(m)
}
func (m *NewEpoch_RemoteEpochChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpoch_RemoteEpochChange.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpoch_RemoteEpochChange proto.InternalMessageInfo

func (m *NewEpoch_RemoteEpochChange) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NewEpoch_RemoteEpochChange) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// NewEpochReady is for the second round of the classical Bracha reliable broadcast.  Note,
// that the message embeds only the config.  This is because the config is derived from
// the epoch_changes, and a correct replica will only echo the request if the config is validly
// constructed.  Since the echo phase only proceeds to ready if 2f+1 echos occur, some (actually, f+1)
// correct replicas must have validated the new config according to the epoch_changes.
type NewEpochEcho struct {
	NewConfig            *NewEpochConfig `protobuf:"bytes,1,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NewEpochEcho) Reset()         { *m = NewEpochEcho{} }
func (m *NewEpochEcho) String() string { return proto.CompactTextString(m) }
func (*NewEpochEcho) ProtoMessage()    {}
func (*NewEpochEcho) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{21}
}
func (m *NewEpochEcho) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEpochEcho.Unmarshal(m, b)
}
func (m *NewEpochEcho) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEpochEcho.Marshal(b, m, deterministic)
}
func (dst *NewEpochEcho) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpochEcho.Merge(dst, src)
}
func (m *NewEpochEcho) XXX_Size() int {
	return xxx_messageInfo_NewEpochEcho.Size(m)
}
func (m *NewEpochEcho) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpochEcho.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpochEcho proto.InternalMessageInfo

func (m *NewEpochEcho) GetNewConfig() *NewEpochConfig {
	if m != nil {
		return m.NewConfig
	}
	return nil
}

// NewEpochReady is for the final round fo the classical Bracha reliable broadcast.
type NewEpochReady struct {
	NewConfig            *NewEpochConfig `protobuf:"bytes,1,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NewEpochReady) Reset()         { *m = NewEpochReady{} }
func (m *NewEpochReady) String() string { return proto.CompactTextString(m) }
func (*NewEpochReady) ProtoMessage()    {}
func (*NewEpochReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{22}
}
func (m *NewEpochReady) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEpochReady.Unmarshal(m, b)
}
func (m *NewEpochReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEpochReady.Marshal(b, m, deterministic)
}
func (dst *NewEpochReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpochReady.Merge(dst, src)
}
func (m *NewEpochReady) XXX_Size() int {
	return xxx_messageInfo_NewEpochReady.Size(m)
}
func (m *NewEpochReady) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpochReady.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpochReady proto.InternalMessageInfo

func (m *NewEpochReady) GetNewConfig() *NewEpochConfig {
	if m != nil {
		return m.NewConfig
	}
	return nil
}

// StateEvent represents an event occurring inside of the state machine
// and is used for tracing and debugging purposes only.
type StateEvent struct {
	// Types that are valid to be assigned to Type:
	//	*StateEvent_AddResults
	//	*StateEvent_Ready
	//	*StateEvent_Propose
	//	*StateEvent_Step
	//	*StateEvent_Tick
	Type                 isStateEvent_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StateEvent) Reset()         { *m = StateEvent{} }
func (m *StateEvent) String() string { return proto.CompactTextString(m) }
func (*StateEvent) ProtoMessage()    {}
func (*StateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23}
}
func (m *StateEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent.Unmarshal(m, b)
}
func (m *StateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent.Marshal(b, m, deterministic)
}
func (dst *StateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent.Merge(dst, src)
}
func (m *StateEvent) XXX_Size() int {
	return xxx_messageInfo_StateEvent.Size(m)
}
func (m *StateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent proto.InternalMessageInfo

type isStateEvent_Type interface {
	isStateEvent_Type()
}

type StateEvent_AddResults struct {
	AddResults *StateEvent_ActionResults `protobuf:"bytes,1,opt,name=add_results,json=addResults,proto3,oneof"`
}

type StateEvent_Ready struct {
	Ready *StateEvent_Actions `protobuf:"bytes,2,opt,name=ready,proto3,oneof"`
}

type StateEvent_Propose struct {
	Propose *Request `protobuf:"bytes,3,opt,name=propose,proto3,oneof"`
}

type StateEvent_Step struct {
	Step *StateEvent_InboundMsg `protobuf:"bytes,4,opt,name=step,proto3,oneof"`
}

type StateEvent_Tick struct {
	Tick *StateEvent_TickElapsed `protobuf:"bytes,5,opt,name=tick,proto3,oneof"`
}

func (*StateEvent_AddResults) isStateEvent_Type() {}

func (*StateEvent_Ready) isStateEvent_Type() {}

func (*StateEvent_Propose) isStateEvent_Type() {}

func (*StateEvent_Step) isStateEvent_Type() {}

func (*StateEvent_Tick) isStateEvent_Type() {}

func (m *StateEvent) GetType() isStateEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *StateEvent) GetAddResults() *StateEvent_ActionResults {
	if x, ok := m.GetType().(*StateEvent_AddResults); ok {
		return x.AddResults
	}
	return nil
}

func (m *StateEvent) GetReady() *StateEvent_Actions {
	if x, ok := m.GetType().(*StateEvent_Ready); ok {
		return x.Ready
	}
	return nil
}

func (m *StateEvent) GetPropose() *Request {
	if x, ok := m.GetType().(*StateEvent_Propose); ok {
		return x.Propose
	}
	return nil
}

func (m *StateEvent) GetStep() *StateEvent_InboundMsg {
	if x, ok := m.GetType().(*StateEvent_Step); ok {
		return x.Step
	}
	return nil
}

func (m *StateEvent) GetTick() *StateEvent_TickElapsed {
	if x, ok := m.GetType().(*StateEvent_Tick); ok {
		return x.Tick
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StateEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StateEvent_OneofMarshaler, _StateEvent_OneofUnmarshaler, _StateEvent_OneofSizer, []interface{}{
		(*StateEvent_AddResults)(nil),
		(*StateEvent_Ready)(nil),
		(*StateEvent_Propose)(nil),
		(*StateEvent_Step)(nil),
		(*StateEvent_Tick)(nil),
	}
}

func _StateEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StateEvent)
	// type
	switch x := m.Type.(type) {
	case *StateEvent_AddResults:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddResults); err != nil {
			return err
		}
	case *StateEvent_Ready:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ready); err != nil {
			return err
		}
	case *StateEvent_Propose:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Propose); err != nil {
			return err
		}
	case *StateEvent_Step:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step); err != nil {
			return err
		}
	case *StateEvent_Tick:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tick); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StateEvent.Type has unexpected type %T", x)
	}
	return nil
}

func _StateEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StateEvent)
	switch tag {
	case 1: // type.add_results
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateEvent_ActionResults)
		err := b.DecodeMessage(msg)
		m.Type = &StateEvent_AddResults{msg}
		return true, err
	case 2: // type.ready
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateEvent_Actions)
		err := b.DecodeMessage(msg)
		m.Type = &StateEvent_Ready{msg}
		return true, err
	case 3: // type.propose
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Type = &StateEvent_Propose{msg}
		return true, err
	case 4: // type.step
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateEvent_InboundMsg)
		err := b.DecodeMessage(msg)
		m.Type = &StateEvent_Step{msg}
		return true, err
	case 5: // type.tick
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateEvent_TickElapsed)
		err := b.DecodeMessage(msg)
		m.Type = &StateEvent_Tick{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StateEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StateEvent)
	// type
	switch x := m.Type.(type) {
	case *StateEvent_AddResults:
		s := proto.Size(x.AddResults)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StateEvent_Ready:
		s := proto.Size(x.Ready)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StateEvent_Propose:
		s := proto.Size(x.Propose)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StateEvent_Step:
		s := proto.Size(x.Step)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StateEvent_Tick:
		s := proto.Size(x.Tick)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StateEvent_ActionResults struct {
	Digests              []*HashResult       `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	Checkpoints          []*CheckpointResult `protobuf:"bytes,2,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StateEvent_ActionResults) Reset()         { *m = StateEvent_ActionResults{} }
func (m *StateEvent_ActionResults) String() string { return proto.CompactTextString(m) }
func (*StateEvent_ActionResults) ProtoMessage()    {}
func (*StateEvent_ActionResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23, 0}
}
func (m *StateEvent_ActionResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent_ActionResults.Unmarshal(m, b)
}
func (m *StateEvent_ActionResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent_ActionResults.Marshal(b, m, deterministic)
}
func (dst *StateEvent_ActionResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent_ActionResults.Merge(dst, src)
}
func (m *StateEvent_ActionResults) XXX_Size() int {
	return xxx_messageInfo_StateEvent_ActionResults.Size(m)
}
func (m *StateEvent_ActionResults) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent_ActionResults.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent_ActionResults proto.InternalMessageInfo

func (m *StateEvent_ActionResults) GetDigests() []*HashResult {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *StateEvent_ActionResults) GetCheckpoints() []*CheckpointResult {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

type StateEvent_Actions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateEvent_Actions) Reset()         { *m = StateEvent_Actions{} }
func (m *StateEvent_Actions) String() string { return proto.CompactTextString(m) }
func (*StateEvent_Actions) ProtoMessage()    {}
func (*StateEvent_Actions) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23, 1}
}
func (m *StateEvent_Actions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent_Actions.Unmarshal(m, b)
}
func (m *StateEvent_Actions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent_Actions.Marshal(b, m, deterministic)
}
func (dst *StateEvent_Actions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent_Actions.Merge(dst, src)
}
func (m *StateEvent_Actions) XXX_Size() int {
	return xxx_messageInfo_StateEvent_Actions.Size(m)
}
func (m *StateEvent_Actions) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent_Actions.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent_Actions proto.InternalMessageInfo

type StateEvent_Proposal struct {
	Request              *Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateEvent_Proposal) Reset()         { *m = StateEvent_Proposal{} }
func (m *StateEvent_Proposal) String() string { return proto.CompactTextString(m) }
func (*StateEvent_Proposal) ProtoMessage()    {}
func (*StateEvent_Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23, 2}
}
func (m *StateEvent_Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent_Proposal.Unmarshal(m, b)
}
func (m *StateEvent_Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent_Proposal.Marshal(b, m, deterministic)
}
func (dst *StateEvent_Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent_Proposal.Merge(dst, src)
}
func (m *StateEvent_Proposal) XXX_Size() int {
	return xxx_messageInfo_StateEvent_Proposal.Size(m)
}
func (m *StateEvent_Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent_Proposal proto.InternalMessageInfo

func (m *StateEvent_Proposal) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type StateEvent_InboundMsg struct {
	Source               uint64   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Msg                  *Msg     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateEvent_InboundMsg) Reset()         { *m = StateEvent_InboundMsg{} }
func (m *StateEvent_InboundMsg) String() string { return proto.CompactTextString(m) }
func (*StateEvent_InboundMsg) ProtoMessage()    {}
func (*StateEvent_InboundMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23, 3}
}
func (m *StateEvent_InboundMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent_InboundMsg.Unmarshal(m, b)
}
func (m *StateEvent_InboundMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent_InboundMsg.Marshal(b, m, deterministic)
}
func (dst *StateEvent_InboundMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent_InboundMsg.Merge(dst, src)
}
func (m *StateEvent_InboundMsg) XXX_Size() int {
	return xxx_messageInfo_StateEvent_InboundMsg.Size(m)
}
func (m *StateEvent_InboundMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent_InboundMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent_InboundMsg proto.InternalMessageInfo

func (m *StateEvent_InboundMsg) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *StateEvent_InboundMsg) GetMsg() *Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StateEvent_TickElapsed struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateEvent_TickElapsed) Reset()         { *m = StateEvent_TickElapsed{} }
func (m *StateEvent_TickElapsed) String() string { return proto.CompactTextString(m) }
func (*StateEvent_TickElapsed) ProtoMessage()    {}
func (*StateEvent_TickElapsed) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{23, 4}
}
func (m *StateEvent_TickElapsed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateEvent_TickElapsed.Unmarshal(m, b)
}
func (m *StateEvent_TickElapsed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateEvent_TickElapsed.Marshal(b, m, deterministic)
}
func (dst *StateEvent_TickElapsed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateEvent_TickElapsed.Merge(dst, src)
}
func (m *StateEvent_TickElapsed) XXX_Size() int {
	return xxx_messageInfo_StateEvent_TickElapsed.Size(m)
}
func (m *StateEvent_TickElapsed) XXX_DiscardUnknown() {
	xxx_messageInfo_StateEvent_TickElapsed.DiscardUnknown(m)
}

var xxx_messageInfo_StateEvent_TickElapsed proto.InternalMessageInfo

type HashResult struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*HashResult_Request_
	//	*HashResult_Batch_
	//	*HashResult_EpochChange_
	//	*HashResult_VerifyBatch_
	//	*HashResult_VerifyRequest_
	Type                 isHashResult_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HashResult) Reset()         { *m = HashResult{} }
func (m *HashResult) String() string { return proto.CompactTextString(m) }
func (*HashResult) ProtoMessage()    {}
func (*HashResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24}
}
func (m *HashResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult.Unmarshal(m, b)
}
func (m *HashResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult.Marshal(b, m, deterministic)
}
func (dst *HashResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult.Merge(dst, src)
}
func (m *HashResult) XXX_Size() int {
	return xxx_messageInfo_HashResult.Size(m)
}
func (m *HashResult) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult proto.InternalMessageInfo

func (m *HashResult) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type isHashResult_Type interface {
	isHashResult_Type()
}

type HashResult_Request_ struct {
	Request *HashResult_Request `protobuf:"bytes,2,opt,name=request,proto3,oneof"`
}

type HashResult_Batch_ struct {
	Batch *HashResult_Batch `protobuf:"bytes,3,opt,name=batch,proto3,oneof"`
}

type HashResult_EpochChange_ struct {
	EpochChange *HashResult_EpochChange `protobuf:"bytes,4,opt,name=epoch_change,json=epochChange,proto3,oneof"`
}

type HashResult_VerifyBatch_ struct {
	VerifyBatch *HashResult_VerifyBatch `protobuf:"bytes,5,opt,name=verify_batch,json=verifyBatch,proto3,oneof"`
}

type HashResult_VerifyRequest_ struct {
	VerifyRequest *HashResult_VerifyRequest `protobuf:"bytes,6,opt,name=verify_request,json=verifyRequest,proto3,oneof"`
}

func (*HashResult_Request_) isHashResult_Type() {}

func (*HashResult_Batch_) isHashResult_Type() {}

func (*HashResult_EpochChange_) isHashResult_Type() {}

func (*HashResult_VerifyBatch_) isHashResult_Type() {}

func (*HashResult_VerifyRequest_) isHashResult_Type() {}

func (m *HashResult) GetType() isHashResult_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HashResult) GetRequest() *HashResult_Request {
	if x, ok := m.GetType().(*HashResult_Request_); ok {
		return x.Request
	}
	return nil
}

func (m *HashResult) GetBatch() *HashResult_Batch {
	if x, ok := m.GetType().(*HashResult_Batch_); ok {
		return x.Batch
	}
	return nil
}

func (m *HashResult) GetEpochChange() *HashResult_EpochChange {
	if x, ok := m.GetType().(*HashResult_EpochChange_); ok {
		return x.EpochChange
	}
	return nil
}

func (m *HashResult) GetVerifyBatch() *HashResult_VerifyBatch {
	if x, ok := m.GetType().(*HashResult_VerifyBatch_); ok {
		return x.VerifyBatch
	}
	return nil
}

func (m *HashResult) GetVerifyRequest() *HashResult_VerifyRequest {
	if x, ok := m.GetType().(*HashResult_VerifyRequest_); ok {
		return x.VerifyRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HashResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HashResult_OneofMarshaler, _HashResult_OneofUnmarshaler, _HashResult_OneofSizer, []interface{}{
		(*HashResult_Request_)(nil),
		(*HashResult_Batch_)(nil),
		(*HashResult_EpochChange_)(nil),
		(*HashResult_VerifyBatch_)(nil),
		(*HashResult_VerifyRequest_)(nil),
	}
}

func _HashResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HashResult)
	// type
	switch x := m.Type.(type) {
	case *HashResult_Request_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *HashResult_Batch_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case *HashResult_EpochChange_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochChange); err != nil {
			return err
		}
	case *HashResult_VerifyBatch_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyBatch); err != nil {
			return err
		}
	case *HashResult_VerifyRequest_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HashResult.Type has unexpected type %T", x)
	}
	return nil
}

func _HashResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HashResult)
	switch tag {
	case 2: // type.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashResult_Request)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_Request_{msg}
		return true, err
	case 3: // type.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashResult_Batch)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_Batch_{msg}
		return true, err
	case 4: // type.epoch_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashResult_EpochChange)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_EpochChange_{msg}
		return true, err
	case 5: // type.verify_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashResult_VerifyBatch)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_VerifyBatch_{msg}
		return true, err
	case 6: // type.verify_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashResult_VerifyRequest)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_VerifyRequest_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HashResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HashResult)
	// type
	switch x := m.Type.(type) {
	case *HashResult_Request_:
		s := proto.Size(x.Request)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashResult_Batch_:
		s := proto.Size(x.Batch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashResult_EpochChange_:
		s := proto.Size(x.EpochChange)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashResult_VerifyBatch_:
		s := proto.Size(x.VerifyBatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashResult_VerifyRequest_:
		s := proto.Size(x.VerifyRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HashResult_Request struct {
	Source               uint64   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Request              *Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashResult_Request) Reset()         { *m = HashResult_Request{} }
func (m *HashResult_Request) String() string { return proto.CompactTextString(m) }
func (*HashResult_Request) ProtoMessage()    {}
func (*HashResult_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24, 0}
}
func (m *HashResult_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult_Request.Unmarshal(m, b)
}
func (m *HashResult_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult_Request.Marshal(b, m, deterministic)
}
func (dst *HashResult_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult_Request.Merge(dst, src)
}
func (m *HashResult_Request) XXX_Size() int {
	return xxx_messageInfo_HashResult_Request.Size(m)
}
func (m *HashResult_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult_Request.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult_Request proto.InternalMessageInfo

func (m *HashResult_Request) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HashResult_Request) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type HashResult_VerifyRequest struct {
	Source               uint64   `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Request              *Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	ExpectedDigest       []byte   `protobuf:"bytes,3,opt,name=expected_digest,json=expectedDigest,proto3" json:"expected_digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashResult_VerifyRequest) Reset()         { *m = HashResult_VerifyRequest{} }
func (m *HashResult_VerifyRequest) String() string { return proto.CompactTextString(m) }
func (*HashResult_VerifyRequest) ProtoMessage()    {}
func (*HashResult_VerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24, 1}
}
func (m *HashResult_VerifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult_VerifyRequest.Unmarshal(m, b)
}
func (m *HashResult_VerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult_VerifyRequest.Marshal(b, m, deterministic)
}
func (dst *HashResult_VerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult_VerifyRequest.Merge(dst, src)
}
func (m *HashResult_VerifyRequest) XXX_Size() int {
	return xxx_messageInfo_HashResult_VerifyRequest.Size(m)
}
func (m *HashResult_VerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult_VerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult_VerifyRequest proto.InternalMessageInfo

func (m *HashResult_VerifyRequest) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HashResult_VerifyRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HashResult_VerifyRequest) GetExpectedDigest() []byte {
	if m != nil {
		return m.ExpectedDigest
	}
	return nil
}

type HashResult_Batch struct {
	Source               uint64        `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Epoch                uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SeqNo                uint64        `protobuf:"varint,3,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks          []*RequestAck `protobuf:"bytes,5,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HashResult_Batch) Reset()         { *m = HashResult_Batch{} }
func (m *HashResult_Batch) String() string { return proto.CompactTextString(m) }
func (*HashResult_Batch) ProtoMessage()    {}
func (*HashResult_Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24, 2}
}
func (m *HashResult_Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult_Batch.Unmarshal(m, b)
}
func (m *HashResult_Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult_Batch.Marshal(b, m, deterministic)
}
func (dst *HashResult_Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult_Batch.Merge(dst, src)
}
func (m *HashResult_Batch) XXX_Size() int {
	return xxx_messageInfo_HashResult_Batch.Size(m)
}
func (m *HashResult_Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult_Batch proto.InternalMessageInfo

func (m *HashResult_Batch) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HashResult_Batch) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *HashResult_Batch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *HashResult_Batch) GetRequestAcks() []*RequestAck {
	if m != nil {
		return m.RequestAcks
	}
	return nil
}

type HashResult_VerifyBatch struct {
	Source               uint64        `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	SeqNo                uint64        `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	RequestAcks          []*RequestAck `protobuf:"bytes,3,rep,name=request_acks,json=requestAcks,proto3" json:"request_acks,omitempty"`
	ExpectedDigest       []byte        `protobuf:"bytes,4,opt,name=expected_digest,json=expectedDigest,proto3" json:"expected_digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HashResult_VerifyBatch) Reset()         { *m = HashResult_VerifyBatch{} }
func (m *HashResult_VerifyBatch) String() string { return proto.CompactTextString(m) }
func (*HashResult_VerifyBatch) ProtoMessage()    {}
func (*HashResult_VerifyBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24, 3}
}
func (m *HashResult_VerifyBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult_VerifyBatch.Unmarshal(m, b)
}
func (m *HashResult_VerifyBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult_VerifyBatch.Marshal(b, m, deterministic)
}
func (dst *HashResult_VerifyBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult_VerifyBatch.Merge(dst, src)
}
func (m *HashResult_VerifyBatch) XXX_Size() int {
	return xxx_messageInfo_HashResult_VerifyBatch.Size(m)
}
func (m *HashResult_VerifyBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult_VerifyBatch.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult_VerifyBatch proto.InternalMessageInfo

func (m *HashResult_VerifyBatch) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HashResult_VerifyBatch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *HashResult_VerifyBatch) GetRequestAcks() []*RequestAck {
	if m != nil {
		return m.RequestAcks
	}
	return nil
}

func (m *HashResult_VerifyBatch) GetExpectedDigest() []byte {
	if m != nil {
		return m.ExpectedDigest
	}
	return nil
}

type HashResult_EpochChange struct {
	Source               uint64       `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Origin               uint64       `protobuf:"varint,2,opt,name=origin,proto3" json:"origin,omitempty"`
	EpochChange          *EpochChange `protobuf:"bytes,3,opt,name=epoch_change,json=epochChange,proto3" json:"epoch_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HashResult_EpochChange) Reset()         { *m = HashResult_EpochChange{} }
func (m *HashResult_EpochChange) String() string { return proto.CompactTextString(m) }
func (*HashResult_EpochChange) ProtoMessage()    {}
func (*HashResult_EpochChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{24, 4}
}
func (m *HashResult_EpochChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashResult_EpochChange.Unmarshal(m, b)
}
func (m *HashResult_EpochChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashResult_EpochChange.Marshal(b, m, deterministic)
}
func (dst *HashResult_EpochChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashResult_EpochChange.Merge(dst, src)
}
func (m *HashResult_EpochChange) XXX_Size() int {
	return xxx_messageInfo_HashResult_EpochChange.Size(m)
}
func (m *HashResult_EpochChange) XXX_DiscardUnknown() {
	xxx_messageInfo_HashResult_EpochChange.DiscardUnknown(m)
}

var xxx_messageInfo_HashResult_EpochChange proto.InternalMessageInfo

func (m *HashResult_EpochChange) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HashResult_EpochChange) GetOrigin() uint64 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *HashResult_EpochChange) GetEpochChange() *EpochChange {
	if m != nil {
		return m.EpochChange
	}
	return nil
}

type CheckpointResult struct {
	QEntry               *QEntry       `protobuf:"bytes,1,opt,name=q_entry,json=qEntry,proto3" json:"q_entry,omitempty"`
	NetworkState         *NetworkState `protobuf:"bytes,2,opt,name=network_state,json=networkState,proto3" json:"network_state,omitempty"`
	EpochConfig          *EpochConfig  `protobuf:"bytes,3,opt,name=epoch_config,json=epochConfig,proto3" json:"epoch_config,omitempty"`
	Value                []byte        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CheckpointResult) Reset()         { *m = CheckpointResult{} }
func (m *CheckpointResult) String() string { return proto.CompactTextString(m) }
func (*CheckpointResult) ProtoMessage()    {}
func (*CheckpointResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_mirbft_c2be34da567ed01c, []int{25}
}
func (m *CheckpointResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckpointResult.Unmarshal(m, b)
}
func (m *CheckpointResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckpointResult.Marshal(b, m, deterministic)
}
func (dst *CheckpointResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointResult.Merge(dst, src)
}
func (m *CheckpointResult) XXX_Size() int {
	return xxx_messageInfo_CheckpointResult.Size(m)
}
func (m *CheckpointResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointResult.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointResult proto.InternalMessageInfo

func (m *CheckpointResult) GetQEntry() *QEntry {
	if m != nil {
		return m.QEntry
	}
	return nil
}

func (m *CheckpointResult) GetNetworkState() *NetworkState {
	if m != nil {
		return m.NetworkState
	}
	return nil
}

func (m *CheckpointResult) GetEpochConfig() *EpochConfig {
	if m != nil {
		return m.EpochConfig
	}
	return nil
}

func (m *CheckpointResult) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkState)(nil), "mirbftpb.NetworkState")
	proto.RegisterType((*NetworkState_Config)(nil), "mirbftpb.NetworkState.Config")
	proto.RegisterType((*NetworkState_Client)(nil), "mirbftpb.NetworkState.Client")
	proto.RegisterType((*Persistent)(nil), "mirbftpb.Persistent")
	proto.RegisterType((*QEntry)(nil), "mirbftpb.QEntry")
	proto.RegisterType((*PEntry)(nil), "mirbftpb.PEntry")
	proto.RegisterType((*CEntry)(nil), "mirbftpb.CEntry")
	proto.RegisterType((*Msg)(nil), "mirbftpb.Msg")
	proto.RegisterType((*FetchBatch)(nil), "mirbftpb.FetchBatch")
	proto.RegisterType((*ForwardBatch)(nil), "mirbftpb.ForwardBatch")
	proto.RegisterType((*ForwardRequest)(nil), "mirbftpb.ForwardRequest")
	proto.RegisterType((*Request)(nil), "mirbftpb.Request")
	proto.RegisterType((*RequestAck)(nil), "mirbftpb.RequestAck")
	proto.RegisterType((*Preprepare)(nil), "mirbftpb.Preprepare")
	proto.RegisterType((*Prepare)(nil), "mirbftpb.Prepare")
	proto.RegisterType((*Commit)(nil), "mirbftpb.Commit")
	proto.RegisterType((*Checkpoint)(nil), "mirbftpb.Checkpoint")
	proto.RegisterType((*Suspect)(nil), "mirbftpb.Suspect")
	proto.RegisterType((*EpochChange)(nil), "mirbftpb.EpochChange")
	proto.RegisterType((*EpochChange_SetEntry)(nil), "mirbftpb.EpochChange.SetEntry")
	proto.RegisterType((*EpochChangeAck)(nil), "mirbftpb.EpochChangeAck")
	proto.RegisterType((*EpochConfig)(nil), "mirbftpb.EpochConfig")
	proto.RegisterType((*NewEpochConfig)(nil), "mirbftpb.NewEpochConfig")
	proto.RegisterType((*NewEpoch)(nil), "mirbftpb.NewEpoch")
	proto.RegisterType((*NewEpoch_RemoteEpochChange)(nil), "mirbftpb.NewEpoch.RemoteEpochChange")
	proto.RegisterType((*NewEpochEcho)(nil), "mirbftpb.NewEpochEcho")
	proto.RegisterType((*NewEpochReady)(nil), "mirbftpb.NewEpochReady")
	proto.RegisterType((*StateEvent)(nil), "mirbftpb.StateEvent")
	proto.RegisterType((*StateEvent_ActionResults)(nil), "mirbftpb.StateEvent.ActionResults")
	proto.RegisterType((*StateEvent_Actions)(nil), "mirbftpb.StateEvent.Actions")
	proto.RegisterType((*StateEvent_Proposal)(nil), "mirbftpb.StateEvent.Proposal")
	proto.RegisterType((*StateEvent_InboundMsg)(nil), "mirbftpb.StateEvent.InboundMsg")
	proto.RegisterType((*StateEvent_TickElapsed)(nil), "mirbftpb.StateEvent.TickElapsed")
	proto.RegisterType((*HashResult)(nil), "mirbftpb.HashResult")
	proto.RegisterType((*HashResult_Request)(nil), "mirbftpb.HashResult.Request")
	proto.RegisterType((*HashResult_VerifyRequest)(nil), "mirbftpb.HashResult.VerifyRequest")
	proto.RegisterType((*HashResult_Batch)(nil), "mirbftpb.HashResult.Batch")
	proto.RegisterType((*HashResult_VerifyBatch)(nil), "mirbftpb.HashResult.VerifyBatch")
	proto.RegisterType((*HashResult_EpochChange)(nil), "mirbftpb.HashResult.EpochChange")
	proto.RegisterType((*CheckpointResult)(nil), "mirbftpb.CheckpointResult")
}

func init() { proto.RegisterFile("mirbft.proto", fileDescriptor_mirbft_c2be34da567ed01c) }

var fileDescriptor_mirbft_c2be34da567ed01c = []byte{
	// 1760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdb, 0x6e, 0xe3, 0xc6,
	0x19, 0x36, 0x25, 0x8a, 0xf2, 0xfe, 0x3a, 0xd8, 0x9e, 0x3d, 0x44, 0x50, 0xdb, 0xac, 0x21, 0x14,
	0xa8, 0xb3, 0x8b, 0x75, 0x51, 0x27, 0x59, 0xa7, 0x4d, 0x4f, 0xbb, 0x5e, 0xa5, 0x32, 0xba, 0xeb,
	0x38, 0x74, 0x9b, 0xf6, 0x8e, 0xa0, 0xc9, 0x91, 0xc4, 0x4a, 0x22, 0x69, 0x72, 0x64, 0xad, 0x2f,
	0x72, 0x53, 0xa0, 0x8f, 0xd1, 0xbe, 0x44, 0x9e, 0xa0, 0x77, 0x45, 0x81, 0xde, 0xf5, 0x19, 0xfa,
	0x00, 0x7d, 0x82, 0x62, 0x4e, 0x9c, 0xa1, 0x48, 0x6a, 0xbd, 0x6e, 0x00, 0x5d, 0x68, 0x66, 0xbe,
	0xff, 0x9f, 0x7f, 0xfe, 0xd3, 0x7c, 0x43, 0x68, 0x2f, 0x82, 0xe4, 0x72, 0x4c, 0x0e, 0xe3, 0x24,
	0x22, 0x11, 0xda, 0xe6, 0xa3, 0xf8, 0x72, 0xf0, 0xe7, 0x3a, 0xb4, 0xcf, 0x30, 0x59, 0x45, 0xc9,
	0xec, 0x82, 0xb8, 0x04, 0xa3, 0x4f, 0xc1, 0xf2, 0xa2, 0x70, 0x1c, 0x4c, 0x7a, 0xc6, 0xbe, 0x71,
	0xd0, 0x3a, 0xfa, 0xc1, 0xa1, 0xc4, 0x1e, 0xea, 0xb8, 0xc3, 0x13, 0x06, 0xb2, 0x05, 0x18, 0x1d,
	0x43, 0xd3, 0x9b, 0x07, 0x38, 0x24, 0x69, 0xaf, 0xb6, 0x5f, 0xdf, 0x24, 0xc7, 0x50, 0xb6, 0x44,
	0xf7, 0xbf, 0x35, 0xc0, 0xe2, 0xba, 0xd0, 0x03, 0x68, 0x84, 0x91, 0x8f, 0xd3, 0x9e, 0xb1, 0x5f,
	0x3f, 0x30, 0x6d, 0x3e, 0x40, 0x3f, 0x86, 0xfb, 0xde, 0x14, 0x7b, 0xb3, 0x38, 0x0a, 0x42, 0xe2,
	0x04, 0x21, 0xc1, 0xc9, 0xb5, 0x3b, 0xef, 0xd5, 0xf6, 0x8d, 0x83, 0x86, 0x8d, 0xd4, 0xd2, 0xa9,
	0x58, 0x41, 0x07, 0xb0, 0xbb, 0x70, 0xdf, 0x3a, 0x38, 0x8e, 0xbc, 0xa9, 0x33, 0xc7, 0xe1, 0x84,
	0x4c, 0x7b, 0xf5, 0x7d, 0xe3, 0xc0, 0xb4, 0xbb, 0x0b, 0xf7, 0xed, 0x90, 0x4e, 0xbf, 0x66, 0xb3,
	0xe8, 0x09, 0xec, 0x85, 0xcb, 0xc5, 0x25, 0x4e, 0x9c, 0x68, 0xec, 0x5c, 0x2e, 0xbd, 0x19, 0x26,
	0x69, 0xcf, 0x64, 0x8a, 0x77, 0xf8, 0xc2, 0x97, 0xe3, 0x97, 0x7c, 0x1a, 0xb5, 0xc1, 0x18, 0xf7,
	0x1a, 0x6c, 0xcd, 0x18, 0xf7, 0x5f, 0x83, 0xc5, 0x0f, 0x82, 0xba, 0x50, 0x0b, 0x7c, 0xe6, 0x2b,
	0xd3, 0xae, 0x05, 0x3e, 0x3a, 0x82, 0x87, 0x5c, 0x93, 0x33, 0x8f, 0x56, 0xce, 0xca, 0x25, 0x38,
	0x59, 0xb8, 0xc9, 0x8c, 0xbb, 0xc5, 0xb4, 0xef, 0xf3, 0xc5, 0xd7, 0xd1, 0xea, 0x0f, 0xd9, 0xd2,
	0xe0, 0x5f, 0x75, 0x80, 0x73, 0x9c, 0xa4, 0x41, 0x4a, 0xa8, 0xca, 0xa7, 0xd0, 0xbc, 0x72, 0x70,
	0x48, 0x92, 0x1b, 0x11, 0x83, 0x5d, 0xe5, 0xcb, 0xaf, 0x86, 0x74, 0x7e, 0xb4, 0x65, 0x5b, 0x57,
	0xec, 0x1f, 0x05, 0xc7, 0x02, 0x5c, 0x5b, 0x07, 0x9f, 0x67, 0xe0, 0x38, 0x03, 0x7b, 0x02, 0x5c,
	0x5f, 0x07, 0x9f, 0x64, 0x60, 0x8f, 0x83, 0x7f, 0x06, 0x6d, 0xee, 0x43, 0x6f, 0xea, 0x86, 0x13,
	0xcc, 0x1c, 0xd3, 0x3a, 0x7a, 0xa8, 0x24, 0x98, 0x2b, 0x4f, 0xd8, 0xe2, 0x68, 0xcb, 0x6e, 0x61,
	0x35, 0x44, 0xbf, 0x86, 0x6e, 0x88, 0x57, 0x22, 0x06, 0xd8, 0x9b, 0x46, 0xcc, 0x75, 0xad, 0xa3,
	0x9e, 0x9e, 0x15, 0x2b, 0xae, 0x80, 0x05, 0x7f, 0xb4, 0x65, 0xb7, 0x43, 0x31, 0x33, 0xf4, 0xa6,
	0x11, 0x7a, 0x09, 0x3b, 0x4a, 0x43, 0x82, 0x5d, 0xff, 0xa6, 0x67, 0xbd, 0x53, 0x45, 0x47, 0xaa,
	0xb0, 0xa9, 0x00, 0xfa, 0x95, 0xae, 0x23, 0x25, 0x6e, 0x42, 0x7a, 0xcd, 0xf2, 0x43, 0x14, 0x14,
	0x5c, 0x50, 0x34, 0x7a, 0x06, 0xcd, 0x74, 0x99, 0xc6, 0xd8, 0x23, 0xbd, 0x6d, 0x26, 0xb8, 0xa7,
	0x04, 0x2f, 0xf8, 0xc2, 0x68, 0xcb, 0x96, 0x98, 0x97, 0x16, 0x98, 0xe4, 0x26, 0xc6, 0x83, 0x05,
	0x58, 0x3c, 0x4e, 0xe8, 0x21, 0x58, 0x29, 0xbe, 0x72, 0xc2, 0x88, 0x05, 0xc7, 0xb4, 0x1b, 0x29,
	0xbe, 0x3a, 0x8b, 0xd0, 0x23, 0xb0, 0xfc, 0x60, 0x82, 0x53, 0xc2, 0xc2, 0xd0, 0xb6, 0xc5, 0x08,
	0x7d, 0x02, 0xdb, 0x09, 0xbe, 0x5a, 0xe2, 0x94, 0xe5, 0x61, 0x3d, 0x7f, 0xda, 0x2f, 0xa2, 0x64,
	0xe5, 0x26, 0xbe, 0xcd, 0x01, 0x76, 0x86, 0x1c, 0x1c, 0x83, 0x75, 0x7e, 0x97, 0xed, 0x06, 0x7f,
	0xa7, 0xb5, 0xb7, 0x2e, 0x69, 0xe8, 0x92, 0x1f, 0xc1, 0xae, 0x56, 0x7c, 0xd7, 0xee, 0x7c, 0x89,
	0x99, 0xea, 0xb6, 0xbd, 0xa3, 0xe6, 0xbf, 0xa6, 0xd3, 0xe8, 0x73, 0xe8, 0x84, 0xbc, 0xd0, 0xa9,
	0xab, 0x09, 0x16, 0x19, 0xf6, 0xa8, 0xbc, 0x0f, 0xd0, 0x68, 0x6b, 0x5d, 0xe7, 0xb3, 0x2c, 0xd7,
	0x78, 0xef, 0x31, 0x37, 0x84, 0x49, 0x66, 0x1a, 0x1b, 0x0c, 0xfe, 0x6b, 0x41, 0xfd, 0x4d, 0x3a,
	0x41, 0xcf, 0x01, 0xe2, 0x04, 0xd3, 0x9f, 0x9b, 0x60, 0x51, 0x37, 0x0f, 0xb4, 0x52, 0xc8, 0xd6,
	0x46, 0x5b, 0xb6, 0x86, 0xa4, 0x21, 0x96, 0x42, 0xb5, 0xf5, 0x10, 0x9f, 0x67, 0x12, 0x12, 0x83,
	0x9e, 0xd0, 0xf6, 0xb8, 0x58, 0x04, 0xa4, 0xa4, 0x80, 0xd8, 0x3c, 0x2b, 0x20, 0xf6, 0x8f, 0x9a,
	0xa4, 0x9c, 0x24, 0x8e, 0xa4, 0x99, 0x74, 0x92, 0xad, 0x51, 0x93, 0x14, 0x52, 0xcf, 0xba, 0xc6,
	0xbb, 0xb3, 0xae, 0x50, 0xa7, 0xd6, 0x7b, 0xd4, 0xe9, 0x2b, 0xd8, 0xd5, 0x65, 0x1d, 0xd7, 0x9b,
	0x89, 0x12, 0xe9, 0x95, 0xca, 0xbf, 0xf0, 0x66, 0xa3, 0x2d, 0xbb, 0x8b, 0x73, 0x33, 0xe8, 0x27,
	0x70, 0x2f, 0xab, 0x33, 0x51, 0x28, 0xa8, 0x58, 0xa5, 0xa3, 0x2d, 0x7b, 0x5b, 0x96, 0x17, 0xfa,
	0x65, 0xa1, 0x41, 0xdc, 0x2b, 0xa6, 0x8b, 0x6a, 0x07, 0x85, 0xf6, 0xf0, 0xa2, 0xd8, 0x1e, 0x80,
	0x29, 0xf8, 0xa0, 0xa8, 0x80, 0x35, 0x83, 0x62, 0x77, 0x38, 0x86, 0xd6, 0x18, 0x13, 0x6f, 0xea,
	0x5c, 0xba, 0xc4, 0x9b, 0xf6, 0x5a, 0xeb, 0xf1, 0xf9, 0x82, 0x2e, 0xbe, 0xa4, 0x6b, 0x34, 0x3e,
	0xe3, 0x6c, 0x84, 0x7e, 0x01, 0x9d, 0x31, 0xaf, 0x45, 0x21, 0xda, 0x5e, 0x37, 0x5d, 0x94, 0xaa,
	0x14, 0x6e, 0x8f, 0xb5, 0x31, 0x2d, 0x14, 0xbe, 0xaf, 0x28, 0xe0, 0x5e, 0x67, 0x7d, 0x67, 0x51,
	0xe2, 0xdc, 0xd9, 0x6d, 0x06, 0x16, 0x53, 0xe8, 0x04, 0x76, 0xe4, 0xde, 0x52, 0xbc, 0xbb, 0x1e,
	0xaf, 0x7c, 0xa3, 0xa0, 0xf1, 0x1a, 0xe7, 0x66, 0xe8, 0xc9, 0x85, 0x30, 0x0b, 0xf8, 0xce, 0xc6,
	0xfd, 0x21, 0xc9, 0x46, 0x59, 0x83, 0xfb, 0x1c, 0x40, 0x79, 0xa7, 0xaa, 0x77, 0xa8, 0xae, 0x53,
	0xcb, 0x75, 0x9d, 0x6b, 0x68, 0xeb, 0xfe, 0xa9, 0x12, 0x3f, 0x86, 0xb6, 0x66, 0xa4, 0xa4, 0x15,
	0xa5, 0x56, 0xda, 0x2d, 0x65, 0x63, 0x5a, 0xd9, 0xed, 0x7e, 0x0f, 0xdd, 0xbc, 0x67, 0xe8, 0x75,
	0x28, 0x9d, 0x68, 0xac, 0x17, 0x9a, 0x6c, 0xb3, 0x12, 0x51, 0x79, 0x9c, 0xaf, 0xa0, 0x29, 0xf5,
	0x7d, 0x0f, 0xee, 0x71, 0x5a, 0xe3, 0x64, 0x94, 0x60, 0x9b, 0x4f, 0x9c, 0xfa, 0xf4, 0x98, 0x49,
	0xae, 0x37, 0x27, 0xec, 0x98, 0x08, 0x4c, 0xdf, 0x25, 0xae, 0xb0, 0x95, 0xfd, 0x1f, 0xfc, 0x11,
	0x40, 0x1d, 0xee, 0x4e, 0x5a, 0xab, 0x7c, 0x80, 0x01, 0x54, 0x27, 0xac, 0xf2, 0xfc, 0x03, 0x68,
	0xf0, 0x52, 0x16, 0x2a, 0xd9, 0x00, 0x3d, 0x81, 0x06, 0xcf, 0xf6, 0xfa, 0x86, 0x40, 0x70, 0xc8,
	0xe0, 0x0c, 0x9a, 0xe7, 0x77, 0xd9, 0xa3, 0xca, 0xec, 0x37, 0x94, 0x23, 0xb2, 0x9e, 0xfa, 0x9d,
	0xa8, 0xfb, 0x29, 0x80, 0x6a, 0xbe, 0x1b, 0x54, 0xea, 0xf7, 0x1d, 0x1f, 0x0c, 0x1e, 0x43, 0x53,
	0xb4, 0x60, 0xb5, 0xa7, 0xa1, 0xed, 0x39, 0xf8, 0x6b, 0x0d, 0x5a, 0x5a, 0xc3, 0xa4, 0xd1, 0x53,
	0xbd, 0x51, 0x44, 0x2f, 0xeb, 0x82, 0xcf, 0xa1, 0xa5, 0xfa, 0x7e, 0x49, 0x8a, 0x2b, 0x2b, 0x6d,
	0x1d, 0x88, 0x3e, 0x86, 0x46, 0xec, 0xa4, 0x98, 0x88, 0x58, 0x7c, 0x58, 0xda, 0xab, 0x0f, 0x2f,
	0x30, 0x61, 0x97, 0xbb, 0x6d, 0xc6, 0x17, 0x98, 0x50, 0xa1, 0x2b, 0x26, 0x64, 0xde, 0x4e, 0xe8,
	0xea, 0x02, 0x93, 0xfe, 0x97, 0xb0, 0x2d, 0x67, 0xca, 0x0f, 0xfc, 0xbe, 0x9c, 0xe3, 0x4f, 0xd0,
	0xcd, 0xdf, 0x27, 0xe8, 0x43, 0x80, 0x28, 0x09, 0x26, 0x41, 0xe8, 0x92, 0x28, 0x11, 0xba, 0xb5,
	0x19, 0x8d, 0x1b, 0xf0, 0xfb, 0xad, 0xb6, 0xe1, 0x7e, 0xcb, 0xdd, 0x6e, 0x83, 0x50, 0x86, 0x82,
	0xbf, 0x2f, 0x1e, 0x81, 0xc5, 0x59, 0xbd, 0xd8, 0x44, 0x8c, 0x50, 0x0f, 0x9a, 0x73, 0xec, 0xfa,
	0x38, 0x91, 0x24, 0x5d, 0x0e, 0xd1, 0x33, 0x40, 0xf1, 0xdc, 0x0d, 0x43, 0xec, 0x3b, 0xf8, 0x6d,
	0x1c, 0x24, 0x2e, 0x09, 0xa2, 0x50, 0x3c, 0x26, 0xf6, 0xc4, 0xca, 0x30, 0x5b, 0x18, 0x7c, 0x6b,
	0x40, 0x37, 0xcf, 0x49, 0xd1, 0xb3, 0xb5, 0xe7, 0x54, 0x05, 0xa5, 0x91, 0xcf, 0xa8, 0x21, 0xdc,
	0x67, 0x3c, 0x35, 0x08, 0x27, 0x8e, 0xc6, 0x1d, 0x6a, 0xd5, 0xdc, 0xc1, 0x46, 0x52, 0x40, 0x4b,
	0xe9, 0xa7, 0xb0, 0x37, 0x0e, 0x42, 0x77, 0xee, 0x28, 0xa2, 0x93, 0xb2, 0x5c, 0x69, 0xdb, 0xbb,
	0x6c, 0x41, 0x35, 0x81, 0x74, 0xf0, 0x6f, 0x03, 0xb6, 0xa5, 0xd5, 0xe8, 0x18, 0x80, 0xa6, 0x6b,
	0xce, 0xe6, 0x4a, 0xc6, 0x6d, 0xd3, 0xd4, 0x16, 0x07, 0x3d, 0x85, 0x8e, 0x1e, 0x25, 0x99, 0xcc,
	0x3f, 0x2c, 0xca, 0x1e, 0xda, 0x78, 0x11, 0x11, 0xac, 0x47, 0xad, 0xad, 0x45, 0x2d, 0xed, 0xbf,
	0x82, 0xbd, 0x02, 0x04, 0x7d, 0x00, 0x4d, 0xfa, 0x1e, 0x54, 0x3d, 0xd0, 0xa2, 0xc3, 0x53, 0xbf,
	0xb2, 0x2f, 0xff, 0x86, 0x3e, 0x6c, 0x35, 0xc6, 0x70, 0xd7, 0x93, 0x0d, 0x46, 0xd0, 0x39, 0x5b,
	0x23, 0x0e, 0x77, 0xd4, 0xf4, 0x0f, 0x13, 0x80, 0xf1, 0xdd, 0xe1, 0x35, 0x7d, 0xe7, 0x0d, 0xa1,
	0xe5, 0xfa, 0xf4, 0x1e, 0x4f, 0x97, 0x73, 0x92, 0x0a, 0x45, 0x03, 0x8d, 0xeb, 0x65, 0xd0, 0xc3,
	0x17, 0x1e, 0x4d, 0x30, 0x9b, 0x23, 0xe9, 0xa5, 0xec, 0xfa, 0xbe, 0x18, 0xa1, 0x4f, 0xa0, 0xc1,
	0x09, 0x10, 0xcf, 0x92, 0xef, 0x6f, 0x50, 0x40, 0x45, 0x39, 0x98, 0xf3, 0xde, 0x28, 0x8e, 0x52,
	0x49, 0xd4, 0x8b, 0x77, 0x1f, 0xe7, 0xbd, 0x0c, 0x83, 0x3e, 0x05, 0x33, 0x25, 0x38, 0x16, 0x2c,
	0xf6, 0x71, 0xe9, 0x1e, 0xa7, 0xe1, 0x65, 0xb4, 0x0c, 0xfd, 0x37, 0x29, 0x7d, 0x49, 0x31, 0x38,
	0x7a, 0x0e, 0x26, 0x09, 0xbc, 0x99, 0xe0, 0xb1, 0xfb, 0xa5, 0x62, 0xbf, 0x0b, 0xbc, 0xd9, 0x70,
	0xee, 0xc6, 0x29, 0xf6, 0xa9, 0x1c, 0xc5, 0xf7, 0xbf, 0x81, 0x4e, 0xee, 0xc8, 0xe8, 0x10, 0x9a,
	0x3c, 0xae, 0xfc, 0xeb, 0x40, 0xae, 0x18, 0x46, 0x6e, 0x3a, 0xe5, 0x38, 0x5b, 0x82, 0xd0, 0xcf,
	0xcb, 0x3a, 0x6b, 0xbf, 0xb4, 0x80, 0xb8, 0xa4, 0x0e, 0xef, 0xdf, 0x83, 0xa6, 0x70, 0x58, 0xff,
	0x18, 0xb6, 0xcf, 0x99, 0x0f, 0xdc, 0xf9, 0x7b, 0xf1, 0x85, 0xfe, 0x10, 0x40, 0x39, 0x84, 0x66,
	0x69, 0x1a, 0x2d, 0x13, 0x0f, 0xcb, 0xec, 0xe5, 0x23, 0xf4, 0x18, 0xea, 0x8b, 0x74, 0x22, 0x42,
	0xd7, 0x51, 0xea, 0xde, 0xa4, 0x13, 0x9b, 0xae, 0xf4, 0x3b, 0xd0, 0xd2, 0x1c, 0x94, 0x31, 0xb0,
	0xff, 0x34, 0x01, 0xd4, 0xb9, 0xb5, 0x22, 0x30, 0x72, 0x0f, 0xca, 0xcf, 0x94, 0xc5, 0x85, 0xec,
	0x50, 0xe2, 0x7a, 0xc0, 0x25, 0xdd, 0x39, 0x52, 0xd7, 0xbd, 0x91, 0x77, 0x9d, 0x26, 0x27, 0x09,
	0x2e, 0x87, 0xa2, 0x61, 0xe9, 0x17, 0x83, 0xfd, 0x52, 0xd1, 0x0d, 0x8f, 0x92, 0x21, 0xb4, 0xaf,
	0x71, 0x12, 0x8c, 0x6f, 0x04, 0xbd, 0x6e, 0x6c, 0x50, 0xf3, 0x35, 0x03, 0x4a, 0x3b, 0x5a, 0xd7,
	0x6a, 0x88, 0x7e, 0x0b, 0x5d, 0xa1, 0x46, 0xba, 0xc0, 0x5a, 0xaf, 0xb0, 0x82, 0x22, 0xe5, 0x88,
	0xce, 0xb5, 0x3e, 0xd1, 0x3f, 0x53, 0x2c, 0xaf, 0x2a, 0x94, 0x4f, 0xd7, 0x7d, 0xbd, 0x29, 0x3b,
	0xbe, 0x81, 0x4e, 0x6e, 0xc7, 0xef, 0x44, 0x2b, 0xfa, 0x11, 0xec, 0xe0, 0xb7, 0x94, 0x9c, 0x60,
	0xdf, 0xc9, 0xdd, 0xbe, 0x5d, 0x39, 0xfd, 0x8a, 0xcd, 0xf6, 0xff, 0x62, 0x40, 0x83, 0x7b, 0xa9,
	0x6a, 0xdf, 0x72, 0x46, 0xa5, 0x2e, 0xfb, 0xfa, 0x26, 0xae, 0xde, 0xb8, 0x25, 0x57, 0xef, 0xff,
	0xcd, 0x80, 0x96, 0x16, 0xc2, 0x4a, 0x6b, 0x2a, 0x48, 0xc6, 0xfa, 0xbe, 0xf5, 0xdb, 0xbe, 0x11,
	0x4a, 0x1c, 0x65, 0x96, 0x3a, 0x6a, 0x95, 0x67, 0x73, 0x55, 0xf6, 0x3d, 0x02, 0x8b, 0x33, 0x16,
	0x61, 0x9f, 0x18, 0x15, 0xb8, 0x4b, 0xfd, 0xb6, 0xdc, 0x25, 0x2b, 0xf4, 0x7f, 0x1a, 0xb0, 0xbb,
	0xde, 0xac, 0xd0, 0x47, 0xef, 0xfc, 0x42, 0x98, 0x7d, 0x1f, 0x2c, 0x7c, 0x96, 0xa9, 0xfd, 0x1f,
	0x9f, 0x65, 0xea, 0xb7, 0xfd, 0x2c, 0xa3, 0xd8, 0xb3, 0xa9, 0xb1, 0xe7, 0x4b, 0x8b, 0x7d, 0x7e,
	0xfe, 0xf8, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xe1, 0x3c, 0x97, 0x8e, 0x16, 0x00, 0x00,
}
