SELECT *
FROM ethereum
Query time: 0.000 seconds
Rows returned: 0

Total running time: 0.000 seconds
-- Truncate request table to include only rows with timestamps between:
--   the first response obtained by the last client to obtain a response
--   and
--   the last response obtained by the client first to finish obtaining responses
-- Then, cut off 5 seconds from each end.
-- We could use a view here too, but a physical table is much faster to access.
-- The script processing this file normally makes sure that
-- changes made by this script to the database are rolled back and are not persisted.
CREATE TABLE request_truncated as
SELECT *
FROM request
WHERE
  ts - 5000000 >= (SELECT max(t)
    FROM (SELECT min(ts) as t
      FROM request
      WHERE event = 'REQ_FINISHED'
      GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
    FROM (SELECT max(ts) as t
      FROM request
      WHERE event = 'REQ_SEND'
      GROUP BY nodeId))
Query time: 0.002 seconds
Rows returned: 0

-- Do the same as above with the protocol table.
-- Note that the truncation times are still taken from the request table.
CREATE TABLE protocol_truncated as
SELECT *
FROM protocol
WHERE
  ts - 5000000 >= (SELECT max(t)
    FROM (SELECT min(ts) as t
      FROM request
      WHERE event = 'REQ_FINISHED'
      GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
    FROM (SELECT max(ts) as t
      FROM request
      WHERE event = 'REQ_SEND'
      GROUP BY nodeId))
Query time: 0.001 seconds
Rows returned: 0

-- Do the same as above with the CPU usage table.
-- Note that the truncation times are still taken from the request table.
CREATE TABLE cpuusage_truncated as
SELECT *
FROM cpuusage
WHERE
            ts - 5000000 >= (SELECT max(t)
                             FROM (SELECT min(ts) as t
                                   FROM request
                                   WHERE event = 'REQ_FINISHED'
                                   GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
                       FROM (SELECT max(ts) as t
                             FROM request
                             WHERE event = 'REQ_SEND'
                             GROUP BY nodeId))
Query time: 0.001 seconds
Rows returned: 0

-- Total CPU usage (average over all peers), truncated data
-- export cpu-total.val
SELECT avg(total)
from cpuusage_truncated
WHERE event = 'CPU_USAGE'
-- (totalcpu[%])
Query time: 0.000 seconds
6.144736842105263
Rows returned: 1

-- System CPU usage (average over all peers), truncated data
-- (This is the CPU usage reported under "System" in /proc/stat)
-- export cpu-system.val
SELECT avg(system)
from cpuusage_truncated
WHERE event = 'CPU_USAGE'
-- (systemcpu[%])
Query time: 0.000 seconds
0.756578947368421
Rows returned: 1

-- End-to-end average request latency, all requests
-- export latency-avg-shortened-raw.val
--
SELECT avg(r2.latency)  / 1000.0
FROM request r1 JOIN request r2 ON r1.nodeId = r2.nodeId
                                AND r1.clSn = r2.clSn
                                AND r1.event = 'REQ_SEND'
                                AND r2.event = 'REQ_FINISHED'
   WHERE r1.ts - 30000000 < (SELECT min(r1.ts)
                            FROM request r1
                            WHERE event = 'REQ_SEND')
-- (avg[ms])
Query time: 0.002 seconds
557.065254876463
Rows returned: 1

-- End-to-end average request latency, all requests
-- export latency-95pctile-shortened-raw.val
--
SELECT r2.latency  / 1000.0
FROM request r1 JOIN request r2 ON r1.nodeId = r2.nodeId
                                AND r1.clSn = r2.clSn
                                AND r1.event = 'REQ_SEND'
                                AND r2.event = 'REQ_FINISHED'
   WHERE r1.ts - 30000000 < (SELECT min(r1.ts)
                            FROM request r1
                            WHERE event = 'REQ_SEND')
ORDER BY r2.latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request r1 JOIN request r2 ON r1.nodeId = r2.nodeId
                                AND r1.clSn = r2.clSn
                                AND r1.event = 'REQ_SEND'
                                AND r2.event = 'REQ_FINISHED'
            WHERE r1.ts - 30000000 < (SELECT min(r1.ts)
                            FROM request r1
                            WHERE event = 'REQ_SEND'))* 95 / 100;
Query time: 0.003 seconds
1005.339
Rows returned: 1

-- (latency[ms])
Query time: 0.000 seconds
Rows returned: 0

-- End-to-end average request latency, all requests
-- export latency-avg-raw.val
--
SELECT avg(latency) / 1000.0
FROM request
WHERE event = 'REQ_FINISHED'
-- (avg[ms])
Query time: 0.000 seconds
557.065254876463
Rows returned: 1

-- Latency standard deviation, all requests
-- export latency-stdev-raw.val
--
SELECT stdev(latency) / 1000.0
FROM request
WHERE event = 'REQ_FINISHED'
-- (stdev[ms])
Query time: 0.001 seconds
288.77095287858555
Rows returned: 1

-- End-to-end average request latency, truncated requests
-- export latency-avg-trunc.val
--
SELECT avg(latency) / 1000.0
FROM request_truncated
WHERE event = 'REQ_FINISHED'
-- (avg[ms])
Query time: 0.000 seconds
555.3061411042944
Rows returned: 1

-- Latency standard deviation, truncated requests
-- export latency-stdev-trunc.val
--
SELECT stdev(latency) / 1000.0
FROM request_truncated
WHERE event = 'REQ_FINISHED'
-- (stdev[ms])
Query time: 0.001 seconds
289.92180290113606
Rows returned: 1

-- 95th percentile request latency, all requests
-- export latency-95pctile-raw.val
--
SELECT latency / 1000.0
FROM request
WHERE event = 'REQ_FINISHED'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request
            WHERE event = 'REQ_FINISHED') * 95 / 100;
-- (latency[ms])
Query time: 0.001 seconds
1005.339
Rows returned: 1

-- 95th percentile request latency, truncated requests
-- export latency-95pctile-trunc.val
--
SELECT latency / 1000.0
FROM request_truncated
WHERE event = 'REQ_FINISHED'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request_truncated
            WHERE event = 'REQ_FINISHED') * 95 / 100;
-- (latency[ms])
Query time: 0.000 seconds
1005.339
Rows returned: 1

-- End-to-end average request latency, all requests
-- export latency-avg-raw-nowm.val
--
SELECT avg(latency) / 1000.0
FROM request
WHERE event = 'ENOUGH_RESP'
-- (avg[ms])
Query time: 0.000 seconds
556.9428309492848
Rows returned: 1

-- Latency standard deviation, all requests
-- export latency-stdev-raw-nowm.val
--
SELECT stdev(latency) / 1000.0
FROM request
WHERE event = 'ENOUGH_RESP'
-- (stdev[ms])
Query time: 0.001 seconds
288.73042754577415
Rows returned: 1

-- End-to-end average request latency, truncated requests
-- export latency-avg-trunc-nowm.val
--
SELECT avg(latency) / 1000.0
FROM request_truncated
WHERE event = 'ENOUGH_RESP'
-- (avg[ms])
Query time: 0.000 seconds
555.1809161554191
Rows returned: 1

-- Latency standard deviation, truncated requests
-- export latency-stdev-trunc-nowm.val
--
SELECT stdev(latency) / 1000.0
FROM request_truncated
WHERE event = 'ENOUGH_RESP'
-- (stdev[ms])
Query time: 0.001 seconds
289.87486840668004
Rows returned: 1

-- 95th percentile request latency, all requests
-- export latency-95pctile-raw-nowm.val
--
SELECT latency / 1000.0
FROM request
WHERE event = 'ENOUGH_RESP'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request
            WHERE event = 'ENOUGH_RESP') * 95 / 100;
-- (latency[ms])
Query time: 0.001 seconds
1004.841
Rows returned: 1

-- 95th percentile request latency, truncated requests
-- export latency-95pctile-trunc-nowm.val
--
SELECT latency / 1000.0
FROM request_truncated
WHERE event = 'ENOUGH_RESP'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request_truncated
            WHERE event = 'ENOUGH_RESP') * 95 / 100;
-- (latency[ms])
Query time: 0.000 seconds
1004.841
Rows returned: 1

-- Average client slack per request, all clients
-- export client-slack-avg-raw.val
--
SELECT avg(latency)
FROM request
WHERE event = 'CLIENT_SLACK'
-- (avg[us])
Query time: 0.000 seconds
2349.556566970091
Rows returned: 1

-- Average client slack, truncated requests
-- export client-slack-avg-trunc.val
--
SELECT avg(latency)
FROM request_truncated
WHERE event = 'CLIENT_SLACK'
-- (avg[us])
Query time: 0.000 seconds
2727.125256673511
Rows returned: 1

-- Client slack standard deviation, all requests
-- export client-slack-stdev-raw.val
--
SELECT stdev(latency)
FROM request
WHERE event = 'CLIENT_SLACK'
-- (avg[us])
Query time: 0.001 seconds
6783.777584992181
Rows returned: 1

-- Client slack standard deviation, all requests
-- export client-slack-stdev-trunc.val
--
SELECT stdev(latency)
FROM request_truncated
WHERE event = 'CLIENT_SLACK'
-- (avg[us])
Query time: 0.000 seconds
3650.017296131111
Rows returned: 1

-- 1st percentile client slack, all requests
-- export client-slack-1pctile-raw.val
--
SELECT latency
FROM request
WHERE event = 'CLIENT_SLACK'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request
            WHERE event = 'CLIENT_SLACK') * 1 / 100;
-- (slack[us])
Query time: 0.000 seconds
-9776
Rows returned: 1

-- 1st percentile client slack, truncated requests
-- export client-slack-1pctile-trunc.val
--
SELECT latency
FROM request_truncated
WHERE event = 'CLIENT_SLACK'
ORDER BY latency ASC
LIMIT 1
    OFFSET (SELECT count()
            FROM request
            WHERE event = 'CLIENT_SLACK') * 1 / 100;
-- (slack[us])
Query time: 0.000 seconds
-5216
Rows returned: 1

-- Experiment duration in seconds
-- export duration-raw.val
--
SELECT (max(ts) - min(ts))/1000000.0
FROM request
WHERE event = 'REQ_FINISHED'
-- (duration[sec])
Query time: 0.000 seconds
29.202361
Rows returned: 1

-- Experiment duration in seconds, truncated data
-- export duration-trunc.val
--
SELECT (max(ts) - min(ts))/1000000.0
FROM request_truncated
WHERE event = 'REQ_FINISHED'
-- (duration[sec])
Query time: 0.000 seconds
18.145281
Rows returned: 1

-- Total number of requests (good for sanity checks whether everything has been delivered)
-- export nreq-raw.val
--
SELECT count()
FROM request
WHERE event = 'REQ_FINISHED'
-- (count[req])
Query time: 0.000 seconds
769
Rows returned: 1

-- Number of requests, using truncated request data
-- export nreq-trunc.val
--
SELECT count()
FROM request_truncated
WHERE event = 'REQ_FINISHED'
-- (count[req])
Query time: 0.000 seconds
489
Rows returned: 1

-- Throughput (without cutting off start and end)
-- export throughput-raw.val
--
-- !!!!! Multiplying by 10 for sampling
-- TODO parametrize the sumpling multiplier
SELECT 10 * 1000000.0 * count() / (max(ts) - min(ts))
FROM request
WHERE event = 'REQ_FINISHED'
-- (throughput[req/sec])
Query time: 0.000 seconds
263.3348721358523
Rows returned: 1

-- Throughput, using truncated request data
-- export throughput-trunc.val
--
-- !!!!! Multiplying by 10 for sampling
-- TODO parametrize the sumpling multiplier
SELECT 10 * 1000000.0 * count() / (max(ts) - min(ts))
FROM request_truncated
WHERE event = 'REQ_FINISHED'
-- (throughput[req/sec])
Query time: 0.000 seconds
269.4915554077118
Rows returned: 1

-- Average batch size
-- export batch-size-avg-trunc.val
--
SELECT avg(val)
FROM protocol_truncated
WHERE event = 'PROPOSE'
-- (avg-batch-size[req])
Query time: 0.000 seconds
64.35526315789474
Rows returned: 1

-- 10th percentile batch size
-- export batch-size-10pctile-trunc.val
--
SELECT val
FROM protocol_truncated
WHERE event = 'PROPOSE'
ORDER BY val ASC
LIMIT 1
OFFSET (SELECT count() from protocol_truncated WHERE event = 'PROPOSE') * 10 / 100
-- (10th-pctile[req])
Query time: 0.000 seconds
64
Rows returned: 1

-- 90th percentile batch size
-- export batch-size-90pctile-trunc.val
--
SELECT val
FROM protocol_truncated
WHERE event = 'PROPOSE'
ORDER BY val ASC
LIMIT 1
    OFFSET (SELECT count() from protocol_truncated WHERE event = 'PROPOSE') * 90 / 100
-- (90th-pctile[req])
Query time: 0.000 seconds
65
Rows returned: 1

-- average proposal rate
-- export propose-rate-raw.val
SELECT count(*) / ((max(ts) - min(ts))/1000000.0)
FROM protocol
WHERE event = 'PROPOSE'
-- (rate[batches/sec])
Query time: 0.000 seconds
4.09924521094809
Rows returned: 1

-- average proposal rate, truncated data
-- export propose-rate-trunc.val
SELECT count(*) / ((max(ts) - min(ts))/1000000.00)
FROM protocol_truncated
WHERE event = 'PROPOSE'
-- (rate[batches/sec])
Query time: 0.000 seconds
4.194208173783263
Rows returned: 1

-- average commit rate
-- export commit-rate-raw.val
SELECT count(*) / ((max(ts) - min(ts))/1000000.0)
FROM protocol
WHERE event = 'COMMIT'
-- (rate[batches/sec])
Query time: 0.000 seconds
16.399170723753173
Rows returned: 1

-- average commit rate, truncated data
-- export commit-rate-trunc.val
SELECT count(*) / ((max(ts) - min(ts))/1000000.0)
FROM protocol_truncated
WHERE event = 'COMMIT'
-- (rate[batches/sec])
Query time: 0.000 seconds
16.782603727118175
Rows returned: 1

-- average message batch, truncated data
-- export msg-batch-avg-trunc.val
SELECT avg(val)
FROM protocol_truncated
where event = 'MSG_BATCH'
-- (batchsize[msg])
Query time: 0.000 seconds
1.6
Rows returned: 1

-- minimal number of epochs
-- this is the number of epochs the node with the fewest epochs went through (ideally same for all nodes)
-- export epochs-min.val
SELECT min(lastEpoch)
FROM (SELECT max(seqNr) as lastEpoch
      FROM protocol
      WHERE event = 'NEW_EPOCH'
      GROUP BY nodeId)
Query time: 0.000 seconds
0
Rows returned: 1

-- maximal number of epochs
-- this is the number of epochs the node with the fewest epochs went through (ideally same for all nodes)
-- export epochs-max.val
SELECT max(lastEpoch)
FROM (SELECT max(seqNr) as lastEpoch
      FROM protocol
      WHERE event = 'NEW_EPOCH'
      GROUP BY nodeId)
Query time: 0.000 seconds
0
Rows returned: 1

-- maximal number of epochs
-- this is the number of epochs the node with the fewest epochs went through (ideally same for all nodes)
-- export epochs-avg.val
SELECT avg(lastEpoch)
FROM (SELECT max(seqNr) as lastEpoch
      FROM protocol
      WHERE event = 'NEW_EPOCH'
      GROUP BY nodeId)
Query time: 0.000 seconds
0.0
Rows returned: 1

-- Total number of view changes at all nodes
-- export viewchanges-total.val
SELECT count()
FROM protocol
WHERE event = 'VIEW_CHANGE'
Query time: 0.000 seconds
0
Rows returned: 1

-- Average number of view changes (should be the total number of actual view changes, if every node completes each view change)
-- export viewchanges-avg.val
SELECT count()*1.0 / (SELECT count() from (SELECT DISTINCT nodeId FROM protocol))
FROM protocol
WHERE event = 'VIEW_CHANGE'
Query time: 0.000 seconds
0.0
Rows returned: 1

Total running time: 0.019 seconds
-- Truncate request table to include only rows with timestamps between:
--   the first response obtained by the last client to obtain a response
--   and
--   the last request obtained by the client first to finish sending requests
-- Then, cut off 5 second from each end.
-- We could use a view here too, but a physical table is much faster to access.
-- The script processing this file normally makes sure that
-- changes made by this script to the database are rolled back and are not persisted.
CREATE TABLE request_truncated as
SELECT *
FROM request
WHERE
  ts - 5000000 >= (SELECT max(t)
    FROM (SELECT min(ts) as t
      FROM request
      WHERE event = 'REQ_FINISHED'
      GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
    FROM (SELECT max(ts) as t
      FROM request
      WHERE event = 'REQ_SEND'
      GROUP BY nodeId))
Query time: 0.002 seconds
Rows returned: 0

-- Do the same as above with the protocol table.
-- Note that the truncation times are still taken from the request table.
CREATE TABLE protocol_truncated as
SELECT *
FROM protocol
WHERE
  ts - 5000000 >= (SELECT max(t)
    FROM (SELECT min(ts) as t
      FROM request
      WHERE event = 'REQ_FINISHED'
      GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
    FROM (SELECT max(ts) as t
      FROM request
      WHERE event = 'REQ_SEND'
      GROUP BY nodeId))
Query time: 0.001 seconds
Rows returned: 0

-- Do the same as above with the CPU usage table.
-- Note that the truncation times are still taken from the request table.
CREATE TABLE cpuusage_truncated as
SELECT *
FROM cpuusage
WHERE
  ts - 5000000 >= (SELECT max(t)
    FROM (SELECT min(ts) as t
      FROM request
      WHERE event = 'REQ_FINISHED'
      GROUP BY nodeId))
  AND ts + 5000000 <= (SELECT min(t)
    FROM (SELECT max(ts) as t
      FROM request
      WHERE event = 'REQ_SEND'
      GROUP BY nodeId))
Query time: 0.001 seconds
Rows returned: 0

-- Total CPU usage in time (peer 0)
-- export timeline-cpu-usage-total-peer-0.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE' AND nodeId = 0))/1000 as msec, total
from cpuusage
WHERE event = 'CPU_USAGE' AND nodeId = 0
-- (msec, totalcpu[%])
Query time: 0.000 seconds
0, 10
502, 1
1003, 3
1505, 5
2007, 6
2508, 3
3009, 9
3511, 6
4013, 12
4514, 3
5016, 7
5518, 3
6020, 8
6522, 3
7024, 9
7526, 6
8028, 7
8530, 4
9032, 12
9533, 3
10035, 8
10537, 4
11039, 11
11541, 3
12043, 8
12545, 3
13048, 10
13550, 6
14052, 9
14554, 3
15056, 8
15558, 3
16060, 8
16562, 4
17063, 8
17565, 3
18067, 8
18568, 3
19070, 8
19572, 2
20073, 9
20575, 3
21076, 10
21579, 3
22080, 10
22582, 7
23083, 10
23585, 3
24087, 9
24589, 3
25090, 7
25593, 3
26095, 7
26597, 3
27099, 8
27600, 3
28102, 8
28603, 3
29105, 7
29606, 4
30109, 11
30610, 6
31112, 13
31614, 7
32116, 8
32617, 2
Rows returned: 66

-- Total CPU usage in time (peer 1)
-- export timeline-cpu-usage-total-peer-1.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE' AND nodeId = 1))/1000 as msec, total
from cpuusage
WHERE event = 'CPU_USAGE' AND nodeId = 1
-- (msec, totalcpu[%])
Query time: 0.000 seconds
0, 10
502, 1
1003, 3
1505, 5
2008, 6
2509, 3
3010, 9
3512, 6
4014, 12
4516, 3
5018, 7
5520, 3
6022, 8
6524, 3
7026, 9
7528, 6
8030, 8
8531, 4
9033, 12
9536, 3
10038, 8
10539, 4
11041, 11
11543, 3
12044, 8
12546, 3
13048, 10
13549, 6
14052, 9
14553, 3
15055, 8
15557, 3
16059, 8
16561, 4
17063, 8
17565, 3
18067, 8
18568, 3
19070, 8
19571, 2
20073, 9
20575, 3
21076, 10
21578, 3
22079, 10
22582, 7
23083, 10
23585, 3
24087, 9
24589, 3
25090, 7
25592, 3
26094, 7
26596, 3
27097, 8
27599, 3
28100, 8
28603, 3
29104, 7
29606, 4
30108, 11
30610, 6
31112, 13
31614, 7
32116, 8
32618, 2
Rows returned: 66

-- Total CPU usage in time (average over all peers)
-- export timeline-cpu-usage-total.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE'))/1000 as msec, avg(total)
from cpuusage
WHERE event = 'CPU_USAGE'
GROUP BY msec
-- (msec, totalcpu[%])
Query time: 0.000 seconds
0, 10.0
502, 1.0
1003, 3.0
1004, 3.0
1505, 5.0
1506, 5.0
2007, 6.0
2008, 6.0
2508, 3.0
2509, 3.0
3009, 9.0
3010, 9.0
3011, 9.0
3511, 6.0
3512, 6.0
4013, 12.0
4014, 12.0
4514, 3.0
4516, 3.0
5016, 7.0
5017, 7.0
5018, 7.0
5518, 3.0
5519, 3.0
5520, 3.0
6020, 8.0
6021, 8.0
6022, 8.0
6522, 3.0
6523, 3.0
6524, 3.0
7024, 9.0
7025, 9.0
7026, 9.0
7526, 6.0
7527, 6.0
7529, 6.0
8027, 8.0
8028, 7.0
8029, 7.0
8030, 8.0
8529, 4.0
8530, 4.0
8531, 4.0
8532, 4.0
9031, 12.0
9032, 12.0
9034, 12.0
9533, 3.5
9534, 3.0
9536, 3.0
10034, 8.0
10035, 8.0
10038, 8.0
10536, 4.0
10537, 4.0
10539, 4.0
11038, 11.0
11039, 11.0
11041, 11.0
11539, 3.0
11541, 3.0
11543, 3.0
12040, 9.0
12043, 8.0
12044, 8.0
12542, 3.0
12545, 3.0
12546, 3.0
13044, 10.0
13047, 10.0
13048, 10.0
13545, 6.0
13549, 6.0
13550, 6.0
14047, 9.0
14050, 9.0
14052, 9.0
14549, 3.0
14552, 3.0
14554, 3.0
15050, 8.0
15055, 8.0
15056, 8.0
15552, 3.0
15557, 3.0
15558, 3.0
16054, 8.0
16058, 8.0
16059, 8.0
16060, 8.0
16556, 3.0
16560, 4.0
16561, 4.0
16562, 4.0
17058, 8.0
17062, 8.0
17063, 8.0
17064, 8.0
17560, 3.0
17563, 3.0
17565, 3.0
18062, 8.0
18065, 8.0
18067, 8.0
18564, 3.0
18566, 3.0
18568, 3.0
18569, 3.0
19066, 8.0
19068, 8.0
19070, 8.0
19567, 2.0
19569, 2.0
19572, 2.0
20069, 9.0
20072, 9.0
20073, 9.0
20571, 3.0
20573, 3.0
20575, 3.0
21072, 10.0
21075, 10.0
21076, 10.0
21574, 3.0
21577, 3.0
21578, 3.0
21579, 3.0
22076, 9.0
22078, 10.0
22080, 10.0
22579, 7.0
22580, 7.0
22582, 7.0
23080, 10.0
23082, 10.0
23083, 10.0
23084, 10.0
23582, 3.0
23584, 3.0
23585, 3.0
24084, 9.0
24086, 9.0
24087, 9.0
24088, 9.0
24586, 3.0
24589, 3.0
25088, 7.0
25090, 7.0
25590, 3.0
25592, 3.0
25593, 3.0
26091, 7.0
26094, 7.0
26095, 7.0
26593, 3.0
26595, 3.0
26596, 3.0
26597, 3.0
27094, 8.0
27097, 8.0
27098, 8.0
27099, 8.0
27596, 3.0
27599, 3.0
27600, 3.0
28097, 8.0
28101, 8.0
28102, 8.0
28599, 3.0
28603, 3.0
29101, 7.0
29104, 7.0
29105, 7.0
29602, 4.0
29606, 4.0
30104, 11.0
30108, 11.0
30109, 11.0
30606, 6.0
30610, 6.0
30611, 6.0
31108, 13.0
31111, 13.0
31112, 13.0
31113, 13.0
31610, 7.0
31613, 7.0
31614, 7.0
31615, 7.0
32111, 8.0
32115, 8.0
32116, 8.0
32613, 2.0
32616, 2.0
32617, 2.0
32618, 2.0
Rows returned: 197

-- System CPU usage in time (peer 0). This is the CPU usage reported under "System" in /proc/stat
-- export timeline-cpu-usage-system-peer-0.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE' AND nodeId = 0))/1000 as msec, system
from cpuusage
WHERE event = 'CPU_USAGE' AND nodeId = 0
-- (msec, systemcpu[%])
Query time: 0.000 seconds
0, 4
502, 0
1003, 0
1505, 0
2007, 1
2508, 0
3009, 1
3511, 1
4013, 2
4514, 0
5016, 1
5518, 0
6020, 1
6522, 0
7024, 1
7526, 1
8028, 1
8530, 1
9032, 1
9533, 1
10035, 1
10537, 1
11039, 1
11541, 0
12043, 1
12545, 0
13048, 1
13550, 1
14052, 1
14554, 0
15056, 1
15558, 0
16060, 1
16562, 1
17063, 1
17565, 0
18067, 1
18568, 0
19070, 1
19572, 0
20073, 1
20575, 1
21076, 1
21579, 0
22080, 2
22582, 1
23083, 1
23585, 0
24087, 1
24589, 1
25090, 1
25593, 0
26095, 1
26597, 1
27099, 1
27600, 0
28102, 1
28603, 0
29105, 1
29606, 0
30109, 1
30610, 1
31112, 1
31614, 1
32116, 1
32617, 0
Rows returned: 66

-- System CPU usage in time (peer 1). This is the CPU usage reported under "System" in /proc/stat
-- export timeline-cpu-usage-system-peer-1.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE' AND nodeId = 1))/1000 as msec, system
from cpuusage
WHERE event = 'CPU_USAGE' AND nodeId = 1
-- (msec, systemcpu[%])
Query time: 0.000 seconds
0, 4
502, 0
1003, 1
1505, 0
2008, 1
2509, 1
3010, 1
3512, 1
4014, 2
4516, 0
5018, 1
5520, 0
6022, 1
6524, 0
7026, 1
7528, 1
8030, 1
8531, 1
9033, 1
9536, 1
10038, 1
10539, 1
11041, 1
11543, 0
12044, 1
12546, 0
13048, 1
13549, 1
14052, 1
14553, 0
15055, 1
15557, 0
16059, 1
16561, 1
17063, 1
17565, 0
18067, 1
18568, 0
19070, 1
19571, 0
20073, 1
20575, 1
21076, 1
21578, 0
22079, 2
22582, 1
23083, 1
23585, 0
24087, 1
24589, 1
25090, 1
25592, 0
26094, 1
26596, 1
27097, 1
27599, 0
28100, 1
28603, 0
29104, 1
29606, 0
30108, 1
30610, 1
31112, 1
31614, 1
32116, 1
32618, 0
Rows returned: 66

-- System CPU usage in time (average over all peers). This is the CPU usage reported under "System" in /proc/stat
-- export timeline-cpu-usage-system.csv
SELECT (ts - (SELECT min(ts) FROM cpuusage WHERE event = 'CPU_USAGE'))/1000 as msec, avg(system)
from cpuusage
WHERE event = 'CPU_USAGE'
GROUP BY msec
-- (msec, systemcpu[%])
Query time: 0.000 seconds
0, 4.0
502, 0.0
1003, 0.6666666666666666
1004, 1.0
1505, 0.0
1506, 0.0
2007, 1.0
2008, 1.0
2508, 0.0
2509, 1.0
3009, 1.0
3010, 1.0
3011, 1.0
3511, 1.0
3512, 1.0
4013, 2.0
4014, 2.0
4514, 0.0
4516, 0.0
5016, 1.0
5017, 1.0
5018, 1.0
5518, 0.0
5519, 0.0
5520, 0.0
6020, 1.0
6021, 1.0
6022, 1.0
6522, 0.0
6523, 0.0
6524, 0.0
7024, 1.0
7025, 1.0
7026, 1.0
7526, 1.0
7527, 1.0
7529, 1.0
8027, 1.0
8028, 1.0
8029, 1.0
8030, 1.0
8529, 1.0
8530, 1.0
8531, 1.0
8532, 1.0
9031, 1.0
9032, 1.0
9034, 1.0
9533, 1.0
9534, 1.0
9536, 1.0
10034, 1.0
10035, 1.0
10038, 1.0
10536, 1.0
10537, 1.0
10539, 1.0
11038, 1.0
11039, 1.0
11041, 1.0
11539, 0.0
11541, 0.0
11543, 0.0
12040, 1.0
12043, 1.0
12044, 1.0
12542, 0.0
12545, 0.0
12546, 0.0
13044, 1.0
13047, 1.0
13048, 1.0
13545, 1.0
13549, 1.0
13550, 1.0
14047, 1.0
14050, 1.0
14052, 1.0
14549, 0.0
14552, 0.0
14554, 0.0
15050, 1.0
15055, 1.0
15056, 1.0
15552, 0.0
15557, 0.0
15558, 0.0
16054, 1.0
16058, 1.0
16059, 1.0
16060, 1.0
16556, 0.0
16560, 1.0
16561, 1.0
16562, 1.0
17058, 1.0
17062, 1.0
17063, 1.0
17064, 1.0
17560, 0.0
17563, 0.0
17565, 0.0
18062, 1.0
18065, 1.0
18067, 1.0
18564, 0.0
18566, 0.0
18568, 0.0
18569, 0.0
19066, 1.0
19068, 1.0
19070, 1.0
19567, 0.0
19569, 0.0
19572, 0.0
20069, 1.0
20072, 1.0
20073, 1.0
20571, 1.0
20573, 1.0
20575, 1.0
21072, 1.0
21075, 1.0
21076, 1.0
21574, 0.0
21577, 0.0
21578, 0.0
21579, 0.0
22076, 2.0
22078, 2.0
22080, 2.0
22579, 1.0
22580, 1.0
22582, 1.0
23080, 1.0
23082, 1.0
23083, 1.0
23084, 1.0
23582, 0.0
23584, 0.0
23585, 0.0
24084, 1.0
24086, 1.0
24087, 1.0
24088, 1.0
24586, 1.0
24589, 1.0
25088, 1.0
25090, 1.0
25590, 0.0
25592, 0.0
25593, 0.0
26091, 1.0
26094, 1.0
26095, 1.0
26593, 1.0
26595, 1.0
26596, 1.0
26597, 1.0
27094, 1.0
27097, 1.0
27098, 1.0
27099, 1.0
27596, 0.0
27599, 0.0
27600, 0.0
28097, 1.0
28101, 1.0
28102, 1.0
28599, 0.0
28603, 0.0
29101, 1.0
29104, 1.0
29105, 1.0
29602, 0.0
29606, 0.0
30104, 1.0
30108, 1.0
30109, 1.0
30606, 1.0
30610, 1.0
30611, 1.0
31108, 1.0
31111, 1.0
31112, 1.0
31113, 1.0
31610, 1.0
31613, 1.0
31614, 1.0
31615, 1.0
32111, 1.0
32115, 1.0
32116, 1.0
32613, 0.0
32616, 0.0
32617, 0.0
32618, 0.0
Rows returned: 197

-- Batches committed in time (peer 0)
-- export timeline-commit-peer-0.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'COMMIT' AND nodeId = 0))/1000 as msec, count()
FROM protocol
WHERE event = 'COMMIT' AND nodeId = 0
GROUP BY msec
-- (msec, count[req])
Query time: 0.000 seconds
0, 3
1, 1
1000, 1
1001, 1
1002, 1
1003, 1
2029, 1
2030, 1
2031, 1
2032, 1
3034, 1
3035, 1
3037, 2
4037, 1
4039, 2
4042, 1
5043, 1
5044, 1
5046, 2
6049, 2
6050, 2
7054, 1
7055, 1
7057, 2
8060, 1
8061, 1
8062, 1
8064, 1
9063, 2
9065, 1
9068, 1
10070, 1
10071, 1
10073, 2
11071, 1
11073, 1
11074, 1
11086, 1
12079, 1
12081, 2
12093, 1
13085, 3
13096, 1
14086, 1
14091, 1
14092, 1
14104, 1
15091, 1
15096, 1
15099, 1
15113, 1
16096, 1
16101, 1
16104, 1
16117, 1
17101, 1
17105, 1
17107, 1
17121, 1
18106, 1
18111, 1
18113, 1
18126, 1
19112, 1
19119, 1
19122, 1
19133, 1
20120, 1
20121, 1
20123, 1
20141, 1
21126, 1
21128, 2
21145, 1
22128, 1
22137, 1
22143, 1
22154, 1
23134, 1
23138, 1
23140, 1
23156, 1
24140, 1
24142, 1
24147, 1
24161, 1
25144, 1
25149, 1
25152, 1
25168, 1
26150, 1
26152, 1
26158, 1
26173, 1
27157, 1
27160, 1
27166, 1
27179, 1
28160, 1
28162, 1
28175, 1
28183, 1
29164, 1
29170, 1
29177, 1
29188, 1
30169, 1
30171, 1
30181, 1
30195, 1
31174, 1
31176, 1
31186, 1
31204, 1
32166, 2
32174, 1
32196, 1
Rows returned: 117

-- Batches committed in time (all peers)
-- export timeline-commit-all.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'COMMIT'))/1000 as msec, count()
FROM protocol
WHERE event = 'COMMIT'
GROUP BY msec
-- (msec, count[req])
Query time: 0.000 seconds
0, 8
1, 8
1000, 4
1001, 4
1002, 3
1003, 4
1004, 1
2029, 3
2030, 4
2031, 4
2032, 5
3033, 1
3034, 3
3035, 4
3037, 5
3038, 1
3042, 1
3043, 1
4037, 4
4040, 8
4041, 1
4042, 3
5043, 5
5044, 2
5046, 5
5047, 3
5048, 1
6049, 8
6050, 4
6051, 4
7054, 3
7055, 5
7056, 6
7057, 2
8061, 8
8062, 4
8063, 3
8064, 1
9063, 3
9064, 4
9065, 3
9066, 2
9068, 2
9069, 2
10070, 2
10071, 9
10073, 5
11071, 3
11073, 1
11074, 7
11076, 1
11086, 4
12080, 3
12081, 3
12082, 6
12093, 1
12094, 3
13084, 4
13085, 8
13096, 3
13097, 1
14086, 1
14087, 3
14091, 3
14092, 3
14093, 2
14104, 4
15091, 3
15093, 1
15096, 3
15097, 1
15099, 4
15112, 2
15113, 2
16096, 2
16097, 2
16101, 4
16104, 4
16117, 4
17101, 4
17105, 3
17106, 4
17108, 1
17121, 4
18106, 2
18107, 2
18110, 1
18111, 3
18113, 4
18126, 4
19112, 1
19113, 2
19114, 1
19119, 2
19120, 1
19121, 1
19122, 3
19124, 1
19133, 2
19134, 2
20119, 1
20120, 5
20121, 2
20123, 2
20124, 2
20142, 4
21126, 4
21128, 3
21129, 5
21145, 3
21146, 1
22128, 4
22136, 1
22137, 1
22138, 1
22140, 1
22143, 4
22154, 4
23134, 1
23135, 3
23137, 1
23138, 1
23139, 1
23140, 2
23141, 3
23156, 1
23157, 3
24140, 2
24141, 1
24142, 1
24143, 3
24144, 1
24147, 4
24161, 4
25143, 1
25144, 3
25149, 2
25150, 1
25152, 1
25153, 4
25168, 4
26150, 3
26151, 1
26152, 2
26153, 2
26158, 1
26159, 3
26173, 3
26174, 1
27156, 1
27157, 2
27158, 1
27160, 2
27161, 2
27166, 4
27179, 1
27180, 3
28160, 1
28161, 5
28162, 2
28173, 1
28174, 2
28175, 1
28184, 4
29164, 4
29168, 3
29170, 1
29176, 1
29177, 3
29188, 4
30169, 4
30171, 3
30172, 1
30181, 2
30182, 2
30195, 4
31174, 4
31175, 1
31176, 2
31178, 1
31186, 2
31187, 1
31191, 1
31204, 4
32166, 8
32174, 4
32196, 4
Rows returned: 187

-- Client 0 request sending in time
-- export timeline-submit-client-1.csv
--
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'REQ_SEND' AND nodeId = -1))/1000 as msec, count()
FROM request
WHERE event = 'REQ_SEND' AND nodeId = -1
GROUP BY msec
-- (msec, count[req])
Query time: 0.000 seconds
Rows returned: 0

-- Client 1 request sending in time
-- export timeline-submit-client-2.csv
--
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'REQ_SEND' AND nodeId = -2))/1000 as msec, count()
FROM request
WHERE event = 'REQ_SEND' AND nodeId = -2
GROUP BY msec
-- (msec, count[req])
Query time: 0.000 seconds
Rows returned: 0

-- Client request sending in time (all clients)
-- export timeline-submit-all.csv
--
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'REQ_SEND'))/1000 as msec, count()
FROM request
WHERE event = 'REQ_SEND'
GROUP BY msec
-- (msec, count[req])
Query time: 0.001 seconds
0, 1
38, 1
77, 1
116, 1
155, 1
194, 1
233, 1
272, 1
311, 1
350, 1
389, 1
429, 1
468, 1
507, 1
546, 1
585, 1
624, 1
663, 1
702, 1
741, 1
780, 1
820, 1
859, 1
898, 1
937, 1
978, 1
1014, 1
1054, 1
1092, 1
1131, 1
1170, 1
1210, 1
1249, 1
1362, 1
1365, 1
1367, 1
1405, 1
1444, 1
1483, 1
1522, 1
1561, 1
1601, 1
1640, 1
1679, 1
1718, 1
1757, 1
1796, 1
1834, 1
1873, 1
1913, 1
1952, 1
1991, 1
2030, 1
2069, 1
2109, 1
2147, 1
2186, 1
2226, 1
2264, 1
2303, 1
2343, 1
2381, 1
2421, 1
2459, 1
2498, 1
2538, 1
2576, 1
2616, 1
2655, 1
2694, 1
2733, 1
2772, 1
2811, 1
2850, 1
2889, 1
2928, 1
2967, 1
3006, 1
3045, 1
3099, 1
3123, 1
3163, 1
3201, 1
3241, 1
3281, 1
3320, 1
3359, 1
3397, 1
3436, 1
3476, 1
3515, 1
3554, 1
3593, 1
3631, 1
3670, 1
3709, 1
3749, 1
3788, 1
3827, 1
3866, 1
3905, 1
3944, 1
3983, 1
4022, 1
4061, 1
4101, 1
4139, 1
4178, 1
4218, 1
4256, 1
4295, 1
4335, 1
4373, 1
4412, 1
4452, 1
4491, 1
4530, 1
4569, 1
4608, 1
4647, 1
4686, 1
4726, 1
4764, 1
4803, 1
4842, 1
4881, 1
4921, 1
4960, 1
4999, 1
5037, 1
5076, 1
5116, 1
5155, 1
5194, 1
5233, 1
5272, 1
5311, 1
5350, 1
5389, 1
5428, 1
5467, 1
5506, 1
5545, 1
5585, 1
5624, 1
5662, 1
5702, 1
5741, 1
5780, 1
5819, 1
5858, 1
5897, 1
5936, 1
5975, 1
6015, 1
6053, 1
6107, 1
6131, 1
6170, 1
6210, 1
6249, 1
6288, 1
6327, 1
6366, 1
6405, 1
6444, 1
6482, 1
6522, 1
6561, 1
6600, 1
6639, 1
6678, 1
6717, 1
6756, 1
6796, 1
6835, 1
6874, 1
6912, 1
6951, 1
6991, 1
7029, 1
7068, 1
7117, 1
7147, 1
7186, 1
7225, 1
7264, 1
7304, 1
7342, 1
7382, 1
7421, 1
7460, 1
7499, 1
7538, 1
7577, 1
7616, 1
7655, 1
7694, 1
7732, 1
7772, 1
7811, 1
7850, 1
7889, 1
7928, 1
7967, 1
8006, 1
8045, 1
8084, 1
8123, 1
8162, 1
8201, 1
8241, 1
8280, 1
8319, 1
8358, 1
8397, 1
8436, 1
8475, 1
8514, 1
8553, 1
8592, 1
8631, 1
8670, 1
8709, 1
8748, 1
8788, 1
8826, 1
8865, 1
8904, 1
8944, 1
8983, 1
9022, 1
9061, 1
9100, 1
9138, 1
9178, 1
9226, 1
9256, 1
9296, 1
9334, 1
9373, 1
9412, 1
9451, 1
9491, 1
9530, 1
9568, 1
9608, 1
9647, 1
9685, 1
9725, 1
9764, 1
9802, 1
9842, 1
9881, 1
9920, 1
9959, 1
9998, 1
10037, 1
10076, 1
10124, 1
10154, 1
10194, 1
10233, 1
10272, 1
10311, 1
10349, 1
10389, 1
10428, 1
10467, 1
10506, 1
10545, 1
10585, 1
10624, 1
10663, 1
10702, 1
10741, 1
10779, 1
10818, 1
10857, 1
10896, 1
10936, 1
10975, 1
11014, 1
11052, 1
11091, 1
11140, 1
11170, 1
11209, 1
11248, 1
11287, 1
11326, 1
11365, 1
11404, 1
11443, 1
11483, 1
11522, 1
11561, 1
11599, 1
11638, 1
11678, 1
11717, 1
11756, 1
11795, 1
11834, 1
11873, 1
11913, 1
11952, 1
11991, 1
12029, 1
12068, 1
12107, 1
12146, 1
12185, 1
12225, 1
12264, 1
12302, 1
12342, 1
12381, 1
12420, 1
12459, 1
12498, 1
12537, 1
12576, 1
12615, 1
12655, 1
12694, 1
12733, 1
12772, 1
12810, 1
12849, 1
12888, 1
12928, 1
12967, 1
13006, 1
13045, 1
13084, 1
13123, 1
13162, 1
13201, 1
13240, 1
13279, 1
13318, 1
13358, 1
13396, 1
13435, 1
13475, 1
13514, 1
13553, 1
13592, 1
13631, 1
13670, 1
13709, 1
13748, 1
13787, 1
13827, 1
13865, 1
13904, 1
13943, 1
13982, 1
14021, 1
14060, 1
14099, 1
14145, 1
14178, 1
14216, 1
14264, 1
14295, 1
14334, 1
14373, 1
14413, 1
14452, 1
14490, 1
14529, 1
14568, 1
14608, 1
14647, 1
14686, 1
14725, 1
14764, 1
14803, 1
14841, 1
14880, 1
14920, 1
14959, 1
14998, 1
15037, 1
15076, 1
15115, 1
15154, 1
15194, 1
15233, 1
15271, 1
15310, 1
15350, 1
15388, 1
15428, 1
15467, 1
15505, 1
15545, 1
15584, 1
15623, 1
15662, 1
15701, 1
15740, 1
15779, 1
15818, 1
15857, 1
15896, 1
15936, 1
15975, 1
16014, 1
16053, 1
16092, 1
16130, 1
16169, 1
16209, 1
16248, 1
16287, 1
16326, 1
16365, 1
16404, 1
16443, 1
16482, 1
16522, 1
16560, 1
16600, 1
16639, 1
16678, 1
16717, 1
16756, 1
16795, 1
16834, 1
16873, 1
16912, 1
16951, 1
16990, 1
17029, 1
17068, 1
17107, 1
17147, 1
17186, 1
17225, 1
17263, 1
17302, 1
17341, 1
17381, 1
17420, 1
17459, 1
17498, 1
17537, 1
17576, 1
17615, 1
17654, 1
17693, 1
17733, 1
17771, 1
17810, 1
17850, 1
17889, 1
17928, 1
17966, 1
18006, 1
18045, 1
18083, 1
18122, 1
18170, 1
18201, 1
18240, 1
18279, 1
18318, 1
18357, 1
18396, 1
18436, 1
18475, 1
18513, 1
18552, 1
18591, 1
18630, 1
18669, 1
18709, 1
18748, 1
18787, 1
18826, 1
18865, 1
18903, 1
18943, 1
18982, 1
19021, 1
19060, 1
19099, 1
19138, 1
19180, 1
19216, 1
19320, 1
19322, 1
19333, 1
19372, 1
19411, 1
19451, 1
19490, 1
19529, 1
19568, 1
19608, 1
19646, 1
19685, 1
19724, 1
19764, 1
19803, 1
19842, 1
19881, 1
19920, 1
19958, 1
19997, 1
20037, 1
20076, 1
20114, 1
20153, 1
20193, 1
20232, 1
20271, 1
20310, 1
20350, 1
20389, 1
20427, 1
20466, 1
20506, 1
20545, 1
20584, 1
20622, 1
20662, 1
20701, 1
20740, 1
20779, 1
20818, 1
20857, 1
20896, 1
20935, 1
20974, 1
21014, 1
21052, 1
21092, 1
21130, 1
21169, 1
21209, 1
21248, 1
21286, 1
21326, 1
21365, 1
21404, 1
21443, 1
21482, 1
21521, 1
21560, 1
21599, 1
21638, 1
21677, 1
21717, 1
21755, 1
21795, 1
21834, 1
21872, 1
21911, 1
21951, 1
21990, 1
22029, 1
22068, 1
22106, 1
22146, 1
22194, 1
22224, 1
22264, 1
22303, 1
22342, 1
22381, 1
22419, 1
22459, 1
22498, 1
22537, 1
22576, 1
22614, 1
22653, 1
22693, 1
22732, 1
22771, 1
22810, 1
22849, 1
22889, 1
22928, 1
22966, 1
23006, 1
23045, 1
23083, 1
23122, 1
23161, 1
23201, 1
23240, 1
23279, 1
23318, 1
23357, 1
23396, 1
23435, 1
23474, 1
23513, 1
23552, 1
23592, 1
23631, 1
23669, 1
23708, 1
23747, 1
23787, 1
23826, 1
23864, 1
23904, 1
23943, 1
23982, 1
24021, 1
24060, 1
24099, 1
24138, 1
24177, 1
24216, 1
24255, 1
24294, 1
24333, 1
24372, 1
24412, 1
24451, 1
24490, 1
24529, 1
24568, 1
24607, 1
24646, 1
24685, 1
24724, 1
24763, 1
24802, 1
24841, 1
24880, 1
24919, 1
24958, 1
24997, 1
25037, 1
25076, 1
25115, 1
25153, 1
25193, 1
25231, 1
25270, 1
25310, 1
25349, 1
25388, 1
25427, 1
25467, 1
25506, 1
25544, 1
25583, 1
25623, 1
25662, 1
25700, 1
25740, 1
25778, 1
25817, 1
25857, 1
25896, 1
25935, 1
25974, 1
26013, 1
26052, 1
26091, 1
26130, 1
26169, 1
26216, 1
26247, 1
26287, 1
26326, 1
26364, 1
26403, 1
26442, 1
26481, 1
26521, 1
26560, 1
26599, 1
26638, 1
26677, 1
26716, 1
26755, 1
26794, 1
26833, 1
26872, 1
26911, 1
26950, 1
26989, 1
27028, 1
27068, 1
27107, 1
27145, 1
27184, 1
27224, 1
27263, 1
27302, 1
27341, 1
27380, 1
27419, 1
27458, 1
27497, 1
27536, 1
27576, 1
27615, 1
27654, 1
27693, 1
27732, 1
27770, 1
27809, 1
27848, 1
27888, 1
27927, 1
27966, 1
28005, 1
28043, 1
28083, 1
28122, 1
28161, 1
28200, 1
28239, 1
28279, 1
28318, 1
28357, 1
28396, 1
28435, 1
28474, 1
28513, 1
28552, 1
28591, 1
28630, 1
28669, 1
28708, 1
28747, 1
28786, 1
28825, 1
28864, 1
28903, 1
28942, 1
28982, 1
29020, 1
29059, 1
29099, 1
29137, 1
29176, 1
29222, 1
29255, 1
29405, 1
29408, 1
29410, 1
29413, 1
29451, 1
29489, 1
29528, 1
29567, 1
29607, 1
29646, 1
29685, 1
29724, 1
29763, 1
29801, 1
29841, 1
29880, 1
29919, 1
29958, 1
29997, 1
Rows returned: 769

-- Latency histogram (by millisecond buckets) for client 0
-- export histogram-latency-client-1.csv
--
SELECT latency/1000 as lat, count()
FROM request
WHERE event = 'REQ_FINISHED' AND nodeId = -1
GROUP BY lat
--(latency[ms], count[req])
Query time: 0.000 seconds
Rows returned: 0

-- Latency histogram (by millisecond buckets), all clients combined
-- export histogram-latency-all.csv
--
SELECT latency/1000 as lat, count()
FROM request
WHERE event = 'REQ_FINISHED'
GROUP BY lat
--(latency[ms], count[req])
Query time: 0.001 seconds
35, 1
36, 1
44, 1
48, 1
49, 1
51, 1
53, 1
54, 2
62, 1
63, 1
64, 1
71, 1
72, 1
74, 1
76, 1
77, 1
78, 1
79, 2
80, 1
84, 1
85, 1
86, 1
87, 1
89, 1
90, 1
92, 1
93, 3
95, 1
96, 1
102, 1
103, 1
104, 2
105, 2
108, 1
109, 1
111, 1
113, 3
116, 1
119, 1
122, 2
125, 2
126, 1
127, 1
128, 1
129, 3
134, 1
135, 1
136, 1
137, 1
138, 1
142, 1
143, 1
144, 2
147, 1
148, 1
150, 1
151, 2
154, 2
155, 2
157, 1
160, 1
161, 1
164, 1
165, 2
166, 2
167, 1
170, 2
174, 2
175, 3
179, 1
182, 1
184, 3
186, 2
188, 1
194, 1
195, 1
196, 2
197, 2
198, 1
199, 1
200, 2
201, 2
202, 1
203, 1
207, 1
208, 1
209, 1
210, 1
213, 2
215, 1
216, 2
217, 1
218, 1
219, 1
222, 1
223, 1
225, 1
226, 3
227, 1
228, 1
232, 1
234, 1
235, 2
236, 1
237, 1
239, 2
240, 1
241, 2
247, 4
248, 2
251, 1
254, 1
255, 1
256, 2
257, 2
258, 1
260, 1
264, 1
268, 3
269, 1
270, 1
271, 1
272, 3
273, 1
275, 2
279, 1
282, 2
284, 1
285, 1
287, 1
288, 2
289, 3
291, 1
295, 1
298, 1
299, 2
300, 2
302, 2
303, 1
304, 1
307, 1
308, 1
311, 1
312, 1
314, 3
316, 1
319, 1
320, 1
321, 1
324, 1
325, 1
327, 1
328, 3
330, 1
332, 1
336, 2
338, 2
340, 1
341, 2
344, 1
345, 1
348, 1
349, 2
350, 1
354, 2
357, 1
360, 2
361, 2
362, 1
363, 1
364, 3
370, 1
372, 1
373, 2
376, 2
377, 1
378, 1
379, 2
380, 1
382, 1
384, 2
385, 1
386, 1
389, 1
390, 2
392, 1
395, 1
397, 1
399, 1
400, 1
401, 2
402, 1
404, 1
409, 1
410, 4
412, 1
413, 1
417, 1
419, 3
421, 2
423, 1
430, 1
431, 2
432, 2
433, 1
434, 1
435, 2
436, 3
437, 1
442, 1
443, 1
445, 2
448, 2
449, 1
450, 2
451, 1
452, 2
454, 2
458, 2
460, 1
462, 3
464, 1
467, 1
469, 1
470, 1
471, 1
472, 1
473, 1
474, 1
475, 1
476, 1
477, 1
482, 2
483, 4
486, 1
489, 1
490, 1
491, 2
493, 3
495, 1
500, 1
502, 1
503, 1
504, 2
505, 2
507, 2
508, 3
510, 2
515, 1
516, 1
518, 1
519, 1
520, 1
523, 5
524, 1
526, 1
529, 1
530, 1
533, 1
534, 2
535, 1
536, 1
537, 1
538, 1
540, 1
542, 1
543, 2
547, 3
549, 1
551, 1
552, 1
555, 1
556, 2
559, 2
562, 1
563, 1
564, 1
565, 1
567, 1
571, 1
572, 1
574, 1
575, 1
576, 2
577, 1
578, 1
579, 2
583, 2
585, 2
588, 1
589, 1
593, 1
596, 3
597, 2
599, 2
600, 1
605, 2
607, 1
608, 2
610, 1
611, 1
612, 2
613, 1
615, 1
616, 1
618, 1
619, 1
620, 1
621, 1
624, 1
625, 1
627, 1
628, 1
630, 2
631, 1
635, 1
636, 2
637, 2
639, 1
642, 1
645, 1
646, 3
648, 1
649, 1
654, 2
655, 1
656, 3
658, 1
664, 1
666, 1
667, 3
668, 1
669, 1
670, 1
671, 3
672, 1
677, 1
679, 3
683, 2
684, 1
686, 3
687, 1
688, 2
690, 1
692, 1
694, 1
696, 1
697, 3
699, 1
702, 1
704, 1
705, 1
707, 1
708, 1
709, 2
710, 1
712, 2
717, 3
718, 3
721, 1
724, 1
725, 1
727, 2
728, 2
729, 1
730, 1
734, 1
735, 2
738, 1
739, 2
740, 3
742, 1
743, 3
744, 2
746, 1
749, 1
751, 2
755, 2
758, 3
759, 2
760, 1
762, 1
765, 2
769, 4
771, 1
774, 2
775, 1
776, 1
777, 1
778, 1
780, 1
781, 1
782, 1
783, 1
784, 1
788, 1
789, 1
790, 2
791, 2
795, 1
798, 2
799, 1
800, 1
802, 1
806, 1
807, 1
809, 1
810, 1
811, 2
812, 1
813, 1
814, 1
815, 1
818, 2
819, 1
821, 2
824, 1
826, 1
827, 1
828, 1
831, 3
832, 1
833, 2
834, 1
840, 1
842, 1
844, 2
845, 1
847, 1
848, 1
850, 3
854, 1
855, 2
856, 1
860, 1
862, 1
863, 1
865, 2
867, 1
870, 1
872, 2
873, 1
875, 1
876, 1
880, 1
881, 3
882, 1
884, 1
890, 2
891, 2
892, 1
894, 1
899, 1
901, 2
903, 3
904, 1
905, 1
906, 1
907, 2
908, 1
913, 1
914, 1
916, 2
918, 1
919, 1
920, 1
921, 3
922, 1
923, 3
925, 4
927, 1
928, 1
932, 1
933, 1
938, 1
942, 1
944, 3
946, 1
948, 2
950, 1
952, 2
953, 5
957, 1
959, 1
960, 2
962, 1
964, 1
966, 3
967, 1
972, 1
974, 1
975, 2
977, 1
978, 1
979, 3
980, 1
981, 1
985, 1
987, 2
988, 1
991, 2
992, 1
993, 2
994, 2
995, 2
997, 1
1001, 2
1005, 4
1008, 1
1010, 1
1011, 1
1013, 2
1015, 1
1017, 2
1018, 1
1019, 1
1020, 1
1024, 1
1025, 1
1026, 4
1030, 1
1033, 1
1034, 2
1036, 1
1037, 1
1046, 2
1047, 1
1048, 1
1050, 1
1053, 1
1054, 1
1059, 1
1064, 1
1066, 1
1068, 1
1070, 1
1076, 1
Rows returned: 537

-- Latency histogram (by millisecond buckets) for client 0, not considering watermark blocking
-- export histogram-latency-client-1.csv
--
SELECT latency/1000 as lat, count()
FROM request
WHERE event = 'ENOUGH_RESP' AND nodeId = -1
GROUP BY lat
--(latency[ms], count[req])
Query time: 0.000 seconds
Rows returned: 0

-- Latency histogram (by millisecond buckets), all clients combined, not considering watermark blocking
-- export histogram-latency-all.csv
--
SELECT latency/1000 as lat, count()
FROM request
WHERE event = 'ENOUGH_RESP'
GROUP BY lat
--(latency[ms], count[req])
Query time: 0.001 seconds
35, 1
36, 1
44, 1
48, 1
49, 1
51, 1
53, 1
54, 2
62, 1
63, 1
64, 1
70, 1
72, 1
74, 1
76, 1
77, 1
78, 3
79, 1
83, 1
84, 1
86, 1
87, 1
89, 1
90, 1
92, 2
93, 2
95, 1
96, 1
102, 1
103, 1
104, 2
105, 2
108, 1
109, 1
111, 1
113, 3
116, 1
119, 1
122, 2
125, 2
126, 1
127, 1
128, 1
129, 3
134, 1
135, 1
136, 1
137, 1
138, 1
142, 1
143, 1
144, 2
147, 1
148, 1
150, 2
151, 1
154, 2
155, 2
157, 1
160, 1
161, 1
164, 1
165, 2
166, 2
167, 1
170, 2
174, 2
175, 3
179, 1
182, 1
184, 3
186, 2
188, 1
194, 1
195, 1
196, 2
197, 3
199, 1
200, 3
201, 1
202, 1
203, 1
206, 1
208, 1
209, 1
210, 1
212, 1
213, 1
215, 1
216, 2
217, 1
218, 1
219, 1
222, 1
223, 1
224, 1
226, 3
227, 1
228, 1
232, 1
234, 1
235, 2
236, 1
237, 1
239, 2
240, 1
241, 2
247, 4
248, 2
251, 1
254, 1
255, 1
256, 2
257, 2
258, 1
260, 1
264, 1
268, 3
269, 1
270, 1
271, 1
272, 4
275, 2
279, 1
282, 2
283, 1
285, 1
287, 1
288, 2
289, 3
291, 1
295, 1
297, 1
299, 2
300, 2
302, 2
303, 1
304, 1
307, 1
308, 1
311, 1
312, 1
314, 3
316, 1
319, 1
320, 1
321, 1
324, 1
325, 1
327, 1
328, 3
330, 1
332, 1
336, 2
338, 2
339, 1
340, 1
341, 1
344, 1
345, 1
348, 2
349, 1
350, 1
353, 1
354, 1
357, 1
360, 2
361, 2
362, 1
363, 2
364, 2
370, 1
372, 2
373, 1
376, 2
377, 1
378, 2
379, 1
380, 1
382, 1
383, 1
384, 1
385, 1
386, 1
389, 2
390, 1
392, 1
395, 1
397, 1
399, 1
400, 1
401, 2
402, 1
404, 1
409, 3
410, 2
412, 1
413, 1
417, 1
419, 3
421, 2
423, 1
430, 1
431, 3
432, 1
433, 1
434, 1
435, 2
436, 3
437, 1
442, 1
443, 1
445, 2
448, 2
449, 1
450, 2
451, 1
452, 2
453, 1
454, 1
457, 1
458, 1
460, 1
462, 3
464, 1
467, 1
469, 1
470, 1
471, 1
472, 1
473, 1
474, 1
475, 1
476, 1
477, 1
482, 3
483, 3
486, 1
489, 1
490, 1
491, 2
493, 3
495, 1
500, 1
502, 1
503, 2
504, 1
505, 2
507, 2
508, 3
510, 2
515, 1
516, 1
518, 1
519, 1
520, 1
522, 1
523, 4
524, 1
526, 1
529, 1
530, 1
533, 1
534, 2
535, 2
537, 1
538, 1
540, 1
542, 2
543, 1
546, 1
547, 2
549, 1
551, 1
552, 1
555, 1
556, 2
559, 2
562, 1
563, 1
564, 1
565, 1
567, 1
571, 1
572, 1
574, 1
575, 2
576, 1
577, 1
578, 1
579, 2
583, 2
585, 2
588, 1
589, 1
593, 1
596, 3
597, 2
598, 1
599, 1
600, 1
605, 2
607, 1
608, 2
610, 1
611, 1
612, 2
613, 1
615, 1
616, 1
618, 1
619, 1
620, 1
621, 1
624, 1
625, 1
627, 1
628, 1
630, 2
631, 1
635, 1
636, 2
637, 2
639, 1
642, 1
645, 2
646, 2
648, 1
649, 1
654, 2
655, 1
656, 3
658, 1
664, 1
666, 1
667, 3
668, 1
669, 1
670, 2
671, 2
672, 1
677, 1
678, 1
679, 2
682, 1
683, 1
684, 1
685, 1
686, 2
687, 1
688, 2
690, 1
692, 1
694, 1
696, 2
697, 2
699, 1
702, 1
704, 2
707, 1
708, 1
709, 2
710, 1
712, 2
717, 3
718, 3
721, 1
724, 1
725, 1
727, 2
728, 3
730, 1
734, 1
735, 2
738, 1
739, 2
740, 3
741, 1
743, 3
744, 2
746, 1
749, 1
751, 2
755, 2
758, 4
759, 1
760, 1
762, 1
765, 2
769, 4
771, 1
773, 1
774, 1
775, 1
776, 2
778, 1
779, 1
781, 1
782, 1
783, 1
784, 1
788, 1
789, 1
790, 3
791, 1
795, 1
798, 2
799, 1
800, 1
802, 1
806, 1
807, 1
809, 1
810, 2
811, 1
812, 1
813, 1
814, 1
815, 1
818, 3
821, 2
824, 1
825, 1
826, 1
828, 1
831, 3
832, 1
833, 2
834, 1
840, 1
842, 1
844, 2
845, 1
847, 2
849, 1
850, 2
854, 2
855, 1
856, 1
860, 1
862, 1
863, 1
865, 2
867, 1
870, 1
871, 1
872, 2
875, 1
876, 1
880, 2
881, 2
882, 1
884, 1
890, 2
891, 2
892, 1
894, 1
899, 1
901, 2
902, 1
903, 2
904, 1
905, 1
906, 1
907, 2
908, 1
913, 1
914, 1
916, 2
918, 1
919, 1
920, 1
921, 3
922, 1
923, 3
924, 1
925, 3
927, 1
928, 1
932, 2
938, 1
942, 1
944, 3
946, 1
947, 1
948, 1
950, 1
952, 3
953, 4
956, 1
959, 1
960, 2
962, 1
964, 1
966, 3
967, 1
972, 1
974, 1
975, 2
976, 1
978, 3
979, 1
980, 1
981, 1
985, 1
986, 1
987, 1
988, 1
990, 1
991, 1
992, 1
993, 2
994, 3
995, 1
997, 1
1000, 1
1001, 1
1004, 2
1005, 2
1008, 1
1010, 2
1012, 1
1013, 1
1015, 1
1017, 2
1018, 1
1019, 1
1020, 1
1024, 2
1025, 1
1026, 3
1030, 1
1033, 2
1034, 1
1036, 1
1037, 1
1046, 2
1047, 2
1049, 1
1052, 1
1053, 1
1058, 1
1063, 1
1065, 1
1068, 1
1070, 1
1076, 1
Rows returned: 547

-- Throughput in time (per millisecond)
-- export timeline-throughput-commit.csv
--
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'REQ_FINISHED'))/1000 as msec, count()
FROM request
WHERE event = 'REQ_FINISHED'
GROUP BY msec
-- (msec, count[req])
Query time: 0.001 seconds
0, 1
3, 2
4, 1
8, 2
9, 1
12, 1
13, 2
15, 1
16, 1
17, 1
36, 1
37, 2
41, 2
42, 1
45, 1
46, 2
49, 1
51, 1
52, 1
1006, 1
1007, 1
1011, 1
1012, 1
1014, 1
1015, 1
1018, 1
1019, 1
1020, 1
1021, 1
1023, 1
1025, 2
1045, 1
1046, 1
1047, 1
1048, 1
1051, 1
1052, 1
1053, 1
1054, 1
1057, 1
1058, 1
1059, 1
1060, 1
1061, 1
2010, 1
2011, 1
2012, 1
2015, 1
2016, 1
2018, 2
2022, 1
2023, 2
2024, 1
2028, 1
2029, 1
2051, 1
2052, 1
2053, 1
2054, 1
2057, 2
2058, 1
2059, 1
2062, 1
2063, 2
2065, 1
2066, 1
3016, 2
3017, 1
3018, 1
3022, 1
3023, 2
3024, 1
3027, 2
3028, 1
3029, 1
3050, 1
3053, 1
3054, 2
3055, 1
3058, 1
3059, 1
3060, 2
3064, 2
3065, 1
3066, 1
4022, 1
4023, 2
4024, 1
4028, 2
4029, 1
4030, 1
4033, 2
4034, 1
4035, 1
4036, 1
4054, 1
4055, 1
4058, 2
4059, 1
4060, 1
4063, 1
4064, 2
4065, 1
4068, 1
4069, 1
4070, 1
5025, 1
5028, 1
5029, 1
5030, 1
5031, 1
5034, 1
5035, 2
5036, 1
5039, 1
5040, 1
5041, 2
5060, 2
5061, 1
5064, 1
5065, 1
5066, 1
5067, 1
5069, 1
5070, 1
5071, 1
5072, 1
5075, 1
5076, 1
6031, 1
6032, 1
6036, 1
6037, 1
6038, 1
6039, 1
6042, 2
6043, 1
6044, 1
6047, 1
6048, 2
6067, 1
6068, 1
6069, 1
6070, 1
6073, 1
6074, 1
6075, 1
6076, 1
6079, 1
6080, 1
6081, 2
6085, 1
7035, 1
7036, 1
7037, 1
7040, 1
7042, 1
7043, 1
7044, 1
7047, 1
7048, 2
7049, 1
7052, 1
7053, 1
7074, 2
7075, 1
7076, 1
7079, 1
7080, 1
7081, 2
7085, 2
7086, 1
7087, 1
8042, 1
8043, 1
8045, 1
8046, 1
8050, 2
8051, 1
8052, 1
8055, 1
8056, 2
8057, 1
8060, 1
8078, 1
8082, 2
8083, 1
8084, 1
8087, 1
8088, 1
8089, 1
8090, 1
8093, 2
8094, 1
8095, 1
9041, 1
9043, 1
9044, 1
9045, 1
9046, 1
9049, 1
9050, 1
9051, 1
9052, 1
9056, 2
9057, 1
9059, 1
9080, 1
9081, 1
9084, 1
9085, 2
9086, 1
9089, 1
9090, 1
9091, 1
9092, 1
9095, 1
9096, 2
10055, 1
10056, 1
10057, 1
10058, 1
10061, 1
10062, 1
10063, 1
10064, 1
10068, 1
10069, 1
10070, 2
10072, 1
10089, 1
10090, 1
10091, 1
10095, 2
10096, 1
10097, 1
10100, 1
10101, 1
10102, 1
10103, 1
10106, 1
10107, 1
11053, 1
11058, 1
11061, 2
11062, 1
11065, 1
11066, 1
11067, 1
11068, 1
11071, 1
11073, 1
11074, 1
11092, 1
11093, 1
11094, 1
11095, 1
11098, 1
11099, 1
11100, 2
11103, 1
11104, 1
11105, 1
11106, 1
11109, 1
12057, 1
12058, 1
12060, 1
12064, 1
12065, 1
12066, 1
12067, 1
12070, 1
12071, 1
12072, 1
12073, 1
12077, 1
12078, 1
12097, 1
12098, 1
12099, 1
12100, 1
12101, 1
12104, 2
12105, 1
12106, 1
12109, 1
12110, 1
12111, 1
12112, 1
13062, 1
13063, 1
13065, 1
13066, 1
13070, 1
13071, 1
13072, 1
13074, 1
13077, 1
13078, 1
13079, 1
13080, 1
13084, 1
13105, 1
13106, 1
13107, 1
13108, 1
13109, 1
13112, 1
13113, 1
13114, 2
13117, 1
13118, 2
13119, 1
14067, 1
14068, 1
14069, 1
14070, 1
14071, 1
14074, 1
14075, 1
14076, 1
14077, 1
14081, 1
14082, 1
14083, 1
14084, 1
14104, 1
14108, 1
14109, 1
14110, 1
14111, 1
14114, 1
14115, 1
14116, 1
14117, 1
14120, 1
14121, 1
14122, 2
15073, 1
15074, 1
15075, 1
15076, 1
15077, 1
15080, 1
15082, 1
15083, 1
15084, 1
15087, 1
15088, 2
15089, 1
15109, 1
15110, 1
15114, 2
15115, 1
15116, 1
15119, 1
15120, 1
15121, 1
15122, 1
15125, 2
16076, 1
16079, 1
16081, 1
16082, 2
16083, 1
16087, 2
16088, 1
16089, 1
16092, 1
16093, 1
16094, 1
16116, 1
16117, 1
16118, 1
16119, 1
16122, 1
16123, 2
16124, 1
16127, 1
16128, 1
16129, 2
16132, 1
17083, 2
17087, 1
17089, 1
17091, 1
17092, 1
17093, 1
17096, 2
17097, 1
17098, 1
17101, 1
17102, 1
17121, 1
17122, 1
17123, 1
17124, 2
17127, 1
17128, 1
17129, 1
17130, 1
17133, 1
17134, 1
17135, 1
17136, 1
18091, 2
18092, 1
18097, 1
18098, 1
18099, 1
18101, 1
18105, 2
18106, 1
18107, 1
18111, 1
18133, 1
18134, 1
18135, 1
18136, 1
18137, 1
18140, 1
18141, 2
18142, 1
18146, 1
18147, 1
18148, 2
19097, 1
19098, 1
19099, 1
19100, 2
19104, 1
19106, 2
19107, 1
19110, 1
19111, 1
19112, 1
19113, 1
19134, 1
19136, 1
19137, 1
19138, 1
19139, 1
19140, 1
19143, 1
19144, 1
19145, 1
19146, 1
19149, 1
19150, 1
19151, 1
20100, 1
20101, 1
20102, 1
20106, 1
20108, 1
20111, 1
20112, 2
20113, 1
20116, 1
20118, 1
20119, 2
20141, 2
20144, 1
20145, 1
20146, 1
20147, 2
20150, 1
20151, 2
20152, 1
20155, 1
20156, 1
21104, 1
21108, 1
21109, 2
21111, 2
21114, 1
21115, 1
21117, 1
21118, 1
21121, 1
21122, 1
21124, 1
21146, 1
21147, 1
21148, 1
21151, 1
21152, 1
21153, 2
21154, 1
21157, 1
21158, 2
21159, 1
21162, 1
22109, 1
22110, 1
22114, 1
22115, 1
22116, 1
22117, 1
22118, 1
22121, 1
22122, 1
22123, 1
22124, 1
22127, 1
22128, 1
22148, 1
22149, 1
22150, 1
22151, 1
22155, 1
22156, 1
22157, 2
22161, 2
22162, 1
22163, 1
23115, 1
23116, 1
23117, 1
23120, 1
23121, 1
23122, 1
23123, 1
23124, 1
23130, 2
23131, 1
23132, 1
23135, 1
23156, 1
23157, 1
23158, 2
23159, 1
23162, 1
23163, 1
23164, 1
23165, 1
23168, 2
23169, 1
23170, 1
24123, 1
24124, 1
24125, 1
24127, 1
24130, 1
24131, 1
24132, 1
24134, 1
24135, 1
24138, 1
24139, 1
24140, 1
24141, 1
24163, 1
24166, 2
24167, 1
24168, 1
24169, 1
24172, 1
24173, 1
24174, 2
24177, 1
24178, 1
24179, 1
25129, 1
25130, 2
25131, 1
25135, 1
25136, 1
25138, 1
25139, 1
25143, 2
25145, 1
25146, 1
25147, 1
25168, 1
25169, 1
25172, 2
25173, 1
25174, 1
25175, 1
25178, 2
25179, 1
25180, 1
25183, 1
25184, 1
26130, 1
26139, 2
26140, 1
26141, 1
26147, 1
26148, 1
26149, 1
26150, 1
26153, 1
26154, 1
26155, 1
26174, 1
26175, 1
26176, 1
26179, 1
26180, 1
26181, 1
26182, 2
26185, 1
26186, 1
26187, 1
26188, 1
26191, 1
27134, 1
27135, 1
27140, 1
27141, 1
27142, 1
27143, 1
27144, 1
27148, 1
27149, 1
27150, 1
27151, 1
27154, 1
27155, 1
27176, 1
27177, 2
27178, 1
27182, 2
27183, 1
27184, 1
27185, 1
27188, 1
27189, 1
27190, 1
27191, 1
28138, 1
28139, 1
28140, 1
28144, 1
28145, 1
28146, 1
28147, 1
28148, 1
28151, 1
28152, 1
28154, 1
28155, 1
28159, 1
28184, 1
28185, 2
28186, 1
28189, 1
28190, 1
28191, 1
28192, 1
28193, 1
28196, 2
28197, 1
28198, 1
29145, 1
29146, 1
29147, 1
29150, 2
29151, 1
29152, 1
29156, 2
29157, 1
29159, 1
29160, 1
29187, 1
29190, 2
29191, 1
29195, 1
29196, 2
29199, 1
29200, 1
29201, 1
29202, 1
Rows returned: 676

-- Throughput in time (per millisecond), in order
-- export timeline-throughput-deliver.csv
--
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'REQ_DELIVERED'))/1000 as msec, count()
FROM request
WHERE event = 'REQ_DELIVERED'
GROUP BY msec
-- (msec, count[req])
Query time: 0.001 seconds
0, 1
1061, 1
4036, 1
8078, 1
16119, 1
19100, 2
23159, 1
24169, 1
27144, 2
Rows returned: 9

-- Batch size histogram
-- export batch-sizes.csv
--
SELECT val, count()
FROM protocol
WHERE event = 'PROPOSE'
GROUP BY val
-- (batch-size[req], num-batches)
Query time: 0.000 seconds
0, 12
56, 2
57, 2
62, 4
64, 72
65, 40
Rows returned: 6

-- Batch size in time (per millisecond), all peers
-- export timeline-batch-size.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'PROPOSE'))/1000 as msec, avg(val)
FROM protocol
WHERE event = 'PROPOSE'
GROUP BY msec
-- (msec, avg[req])
Query time: 0.000 seconds
0, 0.0
2, 0.0
1005, 0.0
1006, 0.0
1007, 0.0
2018, 62.0
2021, 62.0
3020, 64.0
3023, 64.5
3025, 64.0
4027, 64.0
4028, 64.0
4031, 64.5
5033, 65.0
5034, 64.5
5035, 64.0
6038, 65.0
6039, 64.0
6041, 65.0
7042, 64.0
7044, 64.0
7045, 64.0
7047, 64.0
8049, 64.0
8050, 65.0
8053, 64.0
9053, 65.0
9054, 64.0
9055, 64.0
9060, 65.0
10059, 64.0
10060, 64.0
10064, 64.0
11063, 64.0
11064, 65.0
11067, 65.0
11082, 65.0
12070, 64.5
12072, 64.0
12087, 64.0
13074, 64.0
13075, 64.0
13076, 64.0
13093, 64.0
14078, 64.0
14082, 65.0
14083, 65.0
14099, 65.0
15084, 65.0
15086, 64.0
15088, 64.0
15107, 65.0
16089, 64.0
16091, 65.0
16093, 64.0
16112, 64.0
17094, 64.0
17097, 64.0
17099, 65.0
17117, 64.0
18100, 65.0
18103, 64.0
18106, 64.0
18122, 65.0
19105, 64.0
19110, 65.0
19112, 65.0
19129, 64.0
20111, 64.0
20114, 64.0
20117, 64.0
20137, 64.0
21117, 65.0
21120, 64.0
21123, 64.0
21140, 65.0
22121, 64.0
22125, 65.0
22131, 65.0
22149, 64.0
23128, 64.0
23130, 64.0
23133, 64.0
23152, 65.0
24132, 65.0
24135, 64.0
24139, 64.0
24157, 64.0
25138, 64.0
25141, 65.0
25144, 65.0
25163, 64.0
26143, 64.0
26145, 64.0
26152, 64.0
26169, 65.0
27148, 65.0
27150, 64.0
27159, 64.0
27174, 64.0
28153, 64.0
28155, 65.0
28165, 65.0
28179, 64.0
29157, 64.0
29161, 64.0
29171, 64.0
29185, 65.0
30163, 65.0
30165, 64.0
30176, 65.0
30190, 64.0
31168, 57.0
31170, 57.0
31181, 56.0
31201, 56.0
32170, 0.0
32171, 0.0
32179, 0.0
32201, 0.0
Rows returned: 120

-- Proposals in time (per millisecond), all peers
-- export timeline-propose.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'PROPOSE'))/1000 as msec, count()
FROM protocol
WHERE event = 'PROPOSE'
GROUP BY msec
-- (msec, avg[req])
Query time: 0.000 seconds
0, 2
2, 2
1005, 2
1006, 1
1007, 1
2018, 2
2021, 2
3020, 1
3023, 2
3025, 1
4027, 1
4028, 1
4031, 2
5033, 1
5034, 2
5035, 1
6038, 1
6039, 2
6041, 1
7042, 1
7044, 1
7045, 1
7047, 1
8049, 1
8050, 2
8053, 1
9053, 1
9054, 1
9055, 1
9060, 1
10059, 1
10060, 2
10064, 1
11063, 1
11064, 1
11067, 1
11082, 1
12070, 2
12072, 1
12087, 1
13074, 1
13075, 1
13076, 1
13093, 1
14078, 1
14082, 1
14083, 1
14099, 1
15084, 1
15086, 1
15088, 1
15107, 1
16089, 1
16091, 1
16093, 1
16112, 1
17094, 1
17097, 1
17099, 1
17117, 1
18100, 1
18103, 1
18106, 1
18122, 1
19105, 1
19110, 1
19112, 1
19129, 1
20111, 1
20114, 1
20117, 1
20137, 1
21117, 1
21120, 1
21123, 1
21140, 1
22121, 1
22125, 1
22131, 1
22149, 1
23128, 1
23130, 1
23133, 1
23152, 1
24132, 1
24135, 1
24139, 1
24157, 1
25138, 1
25141, 1
25144, 1
25163, 1
26143, 1
26145, 1
26152, 1
26169, 1
27148, 1
27150, 1
27159, 1
27174, 1
28153, 1
28155, 1
28165, 1
28179, 1
29157, 1
29161, 1
29171, 1
29185, 1
30163, 1
30165, 1
30176, 1
30190, 1
31168, 1
31170, 1
31181, 1
31201, 1
32170, 1
32171, 1
32179, 1
32201, 1
Rows returned: 120

-- Proposals in time (per millisecond), all peers
-- export timeline-propose-peer-0.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'PROPOSE'))/1000 as msec, count()
FROM protocol
WHERE event = 'PROPOSE' AND nodeId = 0
GROUP BY msec
-- (msec, avg[req])
Query time: 0.000 seconds
0, 1
1005, 1
2018, 1
3023, 1
4028, 1
5034, 1
6038, 1
7042, 1
8049, 1
9053, 1
10059, 1
11063, 1
12070, 1
13074, 1
14078, 1
15084, 1
16089, 1
17094, 1
18100, 1
19105, 1
20111, 1
21117, 1
22121, 1
23128, 1
24132, 1
25138, 1
26143, 1
27148, 1
28153, 1
29157, 1
30163, 1
31168, 1
32170, 1
Rows returned: 33

-- Batch size in time (per millisecond), peer 0
-- export timeline-batch-size-peer-0.csv
--
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'PROPOSE'))/1000 as msec, avg(val)
FROM protocol
WHERE event = 'PROPOSE' AND nodeId = 0
GROUP BY msec
-- (msec, avg[req])
Query time: 0.000 seconds
0, 0.0
1005, 0.0
2018, 62.0
3023, 65.0
4028, 64.0
5034, 64.0
6038, 65.0
7042, 64.0
8049, 64.0
9053, 65.0
10059, 64.0
11063, 64.0
12070, 65.0
13074, 64.0
14078, 64.0
15084, 65.0
16089, 64.0
17094, 64.0
18100, 65.0
19105, 64.0
20111, 64.0
21117, 65.0
22121, 64.0
23128, 64.0
24132, 65.0
25138, 64.0
26143, 64.0
27148, 65.0
28153, 64.0
29157, 64.0
30163, 65.0
31168, 57.0
32170, 0.0
Rows returned: 33

-- Client slack over time, all clients
-- export client-slack.csv
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'CLIENT_SLACK'))/1000 as msec, sum(latency)/1000
FROM request
WHERE event = 'CLIENT_SLACK'
GROUP BY msec
-- (msec, slack[ms])
Query time: 0.001 seconds
0, 0
36, 2
74, 3
114, 3
153, 2
192, 2
231, 3
270, 3
309, 3
348, 3
387, 2
426, 2
465, 2
505, 2
544, 2
583, 2
622, 2
661, 3
700, 2
739, 2
777, 3
816, 3
855, 3
895, 3
934, 2
973, 2
1011, 3
1051, 3
1090, 3
1129, 3
1168, 3
1207, 3
1246, 2
1363, -74
1366, -38
1368, -1
1403, 2
1442, 2
1481, 2
1520, 2
1559, 3
1597, 3
1637, 3
1676, 3
1715, 3
1754, 3
1793, 2
1832, 3
1871, 3
1910, 3
1949, 3
1989, 2
2027, 3
2067, 3
2105, 3
2145, 3
2184, 3
2223, 2
2262, 2
2301, 2
2340, 3
2379, 3
2418, 2
2457, 3
2496, 3
2535, 2
2574, 3
2614, 2
2653, 2
2692, 2
2730, 3
2770, 2
2809, 2
2848, 2
2887, 2
2926, 3
2965, 3
3005, 2
3043, 3
3090, -4
3121, 3
3160, 2
3199, 3
3238, 3
3277, 3
3316, 3
3355, 3
3395, 2
3433, 3
3472, 3
3511, 3
3551, 3
3590, 2
3629, 3
3668, 2
3707, 3
3747, 2
3786, 2
3824, 2
3863, 3
3902, 3
3942, 3
3981, 3
4019, 3
4058, 3
4099, 1
4137, 2
4176, 3
4215, 2
4254, 2
4293, 2
4332, 2
4371, 3
4410, 3
4449, 3
4488, 3
4527, 3
4567, 3
4605, 3
4644, 3
4684, 2
4722, 3
4762, 2
4801, 3
4840, 3
4879, 3
4918, 3
4957, 2
4996, 3
5035, 3
5074, 3
5113, 3
5152, 2
5191, 3
5230, 3
5269, 3
5309, 2
5348, 2
5387, 2
5426, 3
5465, 3
5504, 3
5543, 3
5582, 3
5621, 2
5660, 3
5699, 2
5738, 3
5778, 2
5816, 3
5855, 3
5895, 2
5934, 2
5973, 2
6012, 2
6050, 3
6098, -5
6129, 3
6168, 3
6207, 3
6246, 3
6285, 3
6324, 3
6363, 3
6402, 3
6441, 3
6480, 3
6520, 2
6559, 2
6598, 2
6637, 2
6676, 2
6715, 2
6754, 2
6792, 3
6832, 2
6871, 3
6910, 3
6949, 3
6988, 3
7028, 2
7066, 3
7118, -9
7144, 3
7184, 2
7223, 2
7262, 2
7300, 3
7340, 3
7378, 3
7418, 3
7457, 3
7496, 3
7535, 3
7574, 2
7613, 2
7652, 3
7691, 2
7730, 3
7769, 3
7809, 2
7848, 2
7887, 2
7926, 2
7965, 3
8004, 2
8042, 3
8081, 3
8123, 0
8160, 3
8199, 3
8238, 3
8278, 2
8317, 2
8355, 2
8394, 3
8433, 3
8472, 3
8512, 2
8551, 2
8590, 3
8629, 3
8668, 2
8707, 3
8746, 3
8785, 2
8824, 2
8863, 3
8902, 3
8941, 2
8981, 2
9020, 2
9058, 3
9097, 3
9136, 3
9176, 2
9227, -9
9254, 2
9292, 3
9332, 2
9371, 2
9410, 2
9449, 3
9488, 3
9527, 2
9566, 2
9605, 3
9644, 3
9683, 3
9722, 3
9762, 2
9800, 3
9840, 2
9879, 2
9918, 3
9956, 3
9996, 3
10035, 2
10073, 3
10113, 3
10152, 2
10191, 2
10230, 2
10269, 2
10308, 3
10347, 3
10386, 3
10425, 3
10465, 3
10503, 3
10543, 3
10581, 3
10620, 3
10660, 3
10699, 3
10737, 3
10777, 2
10816, 3
10855, 3
10894, 2
10934, 2
10973, 2
11011, 3
11051, 2
11090, 2
11136, -4
11168, 2
11207, 2
11245, 3
11285, 2
11324, 3
11363, 3
11402, 2
11441, 3
11480, 3
11520, 2
11559, 2
11597, 3
11636, 3
11675, 3
11714, 3
11753, 3
11793, 3
11832, 3
11871, 3
11909, 3
11948, 3
11987, 3
12027, 2
12066, 3
12105, 3
12144, 3
12183, 3
12222, 3
12261, 2
12300, 3
12339, 3
12379, 2
12418, 2
12457, 3
12496, 3
12535, 3
12574, 3
12613, 3
12652, 3
12691, 3
12730, 3
12769, 2
12808, 2
12847, 3
12886, 3
12925, 3
12965, 2
13004, 2
13042, 3
13081, 3
13120, 3
13160, 2
13199, 2
13238, 3
13277, 3
13316, 3
13355, 2
13394, 2
13433, 3
13472, 3
13511, 3
13550, 3
13590, 2
13629, 2
13668, 2
13707, 2
13746, 3
13785, 2
13823, 3
13863, 2
13902, 2
13941, 2
13980, 3
14019, 3
14058, 3
14097, 3
14136, 3
14175, 2
14214, 3
14265, -8
14292, 3
14332, 2
14371, 3
14409, 3
14448, 3
14488, 2
14527, 2
14566, 3
14605, 3
14644, 3
14683, 2
14722, 2
14761, 2
14800, 3
14839, 2
14878, 3
14917, 3
14956, 3
14996, 2
15035, 3
15074, 3
15112, 3
15155, 0
15191, 2
15229, 3
15269, 2
15308, 3
15347, 3
15386, 3
15425, 3
15464, 2
15503, 3
15542, 3
15581, 3
15620, 3
15659, 3
15699, 2
15738, 2
15777, 2
15816, 2
15855, 2
15894, 2
15933, 3
15972, 3
16011, 3
16050, 3
16089, 3
16128, 3
16167, 3
16206, 3
16245, 3
16284, 3
16323, 3
16362, 3
16401, 3
16441, 3
16480, 3
16519, 3
16558, 3
16597, 3
16636, 3
16675, 3
16715, 2
16753, 2
16792, 2
16831, 2
16870, 3
16909, 3
16948, 3
16987, 3
17027, 2
17066, 2
17104, 3
17143, 3
17183, 3
17222, 2
17261, 2
17300, 3
17339, 3
17378, 3
17417, 3
17456, 3
17496, 2
17535, 2
17574, 2
17613, 2
17652, 3
17691, 2
17729, 3
17768, 3
17808, 2
17847, 3
17886, 3
17925, 2
17964, 2
18003, 3
18042, 3
18081, 3
18120, 3
18171, -8
18198, 3
18237, 3
18276, 3
18316, 2
18355, 2
18394, 2
18433, 3
18472, 2
18511, 2
18550, 2
18589, 3
18628, 3
18667, 3
18706, 3
18746, 2
18785, 2
18824, 2
18863, 2
18901, 3
18940, 3
18979, 3
19019, 2
19058, 2
19096, 3
19135, 3
19181, -3
19214, 2
19321, -64
19323, -27
19331, 3
19370, 3
19409, 3
19448, 3
19488, 2
19527, 2
19566, 2
19604, 3
19643, 3
19683, 2
19722, 2
19760, 3
19799, 3
19839, 2
19878, 2
19917, 2
19956, 3
19995, 3
20034, 3
20073, 3
20112, 3
20151, 3
20191, 2
20230, 2
20268, 3
20307, 3
20346, 3
20385, 3
20425, 3
20464, 3
20503, 2
20542, 2
20581, 2
20620, 3
20659, 3
20699, 2
20737, 3
20776, 3
20816, 2
20854, 3
20893, 3
20932, 3
20971, 3
21011, 3
21050, 3
21088, 3
21128, 3
21167, 3
21206, 3
21245, 3
21284, 2
21323, 3
21362, 3
21401, 2
21441, 2
21479, 3
21518, 3
21558, 2
21597, 2
21636, 2
21675, 3
21713, 3
21753, 2
21792, 2
21831, 2
21870, 2
21909, 3
21948, 3
21987, 2
22026, 3
22066, 2
22104, 3
22143, 3
22193, -7
22221, 3
22260, 3
22299, 3
22338, 3
22378, 3
22417, 2
22456, 2
22495, 2
22534, 2
22573, 2
22612, 3
22651, 3
22691, 2
22730, 2
22769, 2
22808, 2
22847, 3
22885, 3
22924, 3
22963, 3
23003, 3
23041, 3
23082, 2
23120, 2
23158, 3
23198, 3
23237, 3
23277, 2
23316, 2
23354, 3
23393, 3
23432, 3
23471, 3
23511, 2
23549, 3
23588, 3
23627, 3
23667, 2
23706, 2
23745, 3
23784, 3
23823, 3
23862, 2
23901, 3
23940, 3
23980, 2
24019, 2
24057, 3
24098, 1
24135, 3
24174, 3
24214, 2
24253, 2
24292, 2
24331, 2
24370, 2
24409, 3
24448, 3
24487, 3
24526, 2
24565, 2
24604, 2
24643, 3
24682, 3
24721, 3
24760, 3
24799, 3
24839, 2
24877, 3
24917, 2
24956, 3
24995, 3
25034, 3
25073, 3
25113, 1
25151, 3
25190, 3
25229, 3
25268, 3
25307, 3
25346, 3
25386, 2
25424, 3
25463, 3
25502, 3
25542, 2
25581, 2
25620, 2
25658, 3
25698, 2
25737, 2
25776, 2
25815, 3
25854, 3
25894, 2
25932, 2
25971, 3
26011, 2
26050, 2
26089, 2
26127, 3
26166, 3
26217, -7
26245, 3
26283, 3
26323, 2
26362, 2
26401, 2
26440, 3
26479, 3
26519, 2
26557, 2
26596, 3
26635, 3
26674, 3
26713, 3
26753, 2
26791, 3
26831, 2
26870, 2
26909, 3
26948, 3
26987, 2
27026, 3
27064, 3
27104, 2
27143, 3
27182, 3
27225, 0
27261, 2
27299, 3
27338, 3
27378, 2
27417, 2
27456, 2
27495, 3
27534, 3
27573, 3
27612, 3
27651, 3
27690, 3
27729, 2
27768, 3
27807, 3
27846, 3
27885, 3
27925, 2
27964, 2
28002, 3
28041, 3
28080, 3
28120, 2
28159, 3
28198, 2
28237, 3
28276, 3
28315, 3
28353, 3
28393, 3
28432, 3
28471, 3
28511, 2
28550, 2
28588, 2
28628, 2
28666, 3
28705, 3
28745, 3
28784, 3
28823, 3
28862, 2
28901, 2
28940, 2
28979, 3
29018, 3
29057, 3
29096, 3
29136, 2
29174, 3
29213, 3
29252, 3
29406, -111
29409, -75
29411, -38
29414, -2
29447, 3
29486, 3
29525, 3
29565, 2
29604, 3
29643, 2
29682, 2
29721, 2
29760, 2
29799, 3
29839, 2
29877, 3
29916, 3
29955, 3
29994, 3
Rows returned: 769

-- Client slack over time, client 1
-- export client-slack-client-1.csv
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'CLIENT_SLACK' AND nodeId = -1)) as usec, latency
FROM request
WHERE event = 'CLIENT_SLACK' AND nodeId = -1
-- (usec, slack[us])
Query time: 0.000 seconds
Rows returned: 0

-- Client slack over time, client 2
-- export client-slack-client-2.csv
SELECT (ts - (SELECT min(ts) FROM request WHERE event = 'CLIENT_SLACK' AND nodeId = -2)) as usec, latency
FROM request
WHERE event = 'CLIENT_SLACK' AND nodeId = -2
-- (usec, slack[us])
Query time: 0.000 seconds
Rows returned: 0

-- Message batch size histogram
-- export histogram-msg-batch-size.csv
--
SELECT val, count()
FROM protocol_truncated
WHERE event = 'MSG_BATCH'
GROUP BY val
--(batchsize[req], count[batches])
Query time: 0.000 seconds
1, 4
2, 6
Rows returned: 2

-- Message batch sizes over time
-- export timeline-avg-msg-batch.csv
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'MSG_BATCH'))/1000 as msec, avg(val)
from protocol
WHERE event = 'MSG_BATCH'
GROUP BY msec
-- (msec, avgbatch[req])
Query time: 0.000 seconds
0, 1.0
2, 4.0
24141, 1.0
24145, 2.0
24146, 2.0
24148, 2.0
24149, 1.6666666666666667
24150, 2.0
25147, 1.0
25156, 1.0
26155, 1.0
26156, 2.0
Rows returned: 12

-- Bandwidths between all pairs of peers.
-- The output of this query is meant for further processing by another scripts that formats the data as a table.
-- export bandwidths-list.csv
SELECT nodeId as sender, seqNr as receiver, val as bandwidth
FROM protocol
WHERE event = 'BANDWIDTH'
-- (sender, receiver, bandwidth[kB/s])
Query time: 0.000 seconds
Rows returned: 0

-- Leaders in epochs.
-- export epoch-leaders.csv
SELECT seqNr as epoch, avg(val) as leaders
FROM protocol
WHERE event = 'NEW_EPOCH'
group by epoch
Query time: 0.000 seconds
0, 4.0
Rows returned: 1

-- View changes, from view 0 to view 1 only.
-- export timeline-view-change-first.csv
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'NEW_EPOCH'))/1000 as msec, count()
from protocol
WHERE event = 'VIEW_CHANGE' AND val = 1
GROUP BY msec
Query time: 0.000 seconds
Rows returned: 0

-- Cascading view changes.
-- export timeline-view-change-cascade.csv
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'NEW_EPOCH'))/1000 as msec, count()
from protocol
WHERE event = 'VIEW_CHANGE' AND val > 1
GROUP BY msec
Query time: 0.000 seconds
Rows returned: 0

-- All view changes.
-- export timeline-view-change-all.csv
SELECT (ts - (SELECT min(ts) FROM protocol WHERE event = 'NEW_EPOCH'))/1000 as msec, count()
from protocol
WHERE event = 'VIEW_CHANGE'
GROUP BY msec
Query time: 0.000 seconds
Rows returned: 0

Total running time: 0.015 seconds
