// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/IBM/mirbft"
	"github.com/IBM/mirbft/mirbftpb"
)

type Storage struct {
	LoadNextStub        func() (*mirbftpb.Persistent, error)
	loadNextMutex       sync.RWMutex
	loadNextArgsForCall []struct {
	}
	loadNextReturns struct {
		result1 *mirbftpb.Persistent
		result2 error
	}
	loadNextReturnsOnCall map[int]struct {
		result1 *mirbftpb.Persistent
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Storage) LoadNext() (*mirbftpb.Persistent, error) {
	fake.loadNextMutex.Lock()
	ret, specificReturn := fake.loadNextReturnsOnCall[len(fake.loadNextArgsForCall)]
	fake.loadNextArgsForCall = append(fake.loadNextArgsForCall, struct {
	}{})
	fake.recordInvocation("LoadNext", []interface{}{})
	fake.loadNextMutex.Unlock()
	if fake.LoadNextStub != nil {
		return fake.LoadNextStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loadNextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Storage) LoadNextCallCount() int {
	fake.loadNextMutex.RLock()
	defer fake.loadNextMutex.RUnlock()
	return len(fake.loadNextArgsForCall)
}

func (fake *Storage) LoadNextCalls(stub func() (*mirbftpb.Persistent, error)) {
	fake.loadNextMutex.Lock()
	defer fake.loadNextMutex.Unlock()
	fake.LoadNextStub = stub
}

func (fake *Storage) LoadNextReturns(result1 *mirbftpb.Persistent, result2 error) {
	fake.loadNextMutex.Lock()
	defer fake.loadNextMutex.Unlock()
	fake.LoadNextStub = nil
	fake.loadNextReturns = struct {
		result1 *mirbftpb.Persistent
		result2 error
	}{result1, result2}
}

func (fake *Storage) LoadNextReturnsOnCall(i int, result1 *mirbftpb.Persistent, result2 error) {
	fake.loadNextMutex.Lock()
	defer fake.loadNextMutex.Unlock()
	fake.LoadNextStub = nil
	if fake.loadNextReturnsOnCall == nil {
		fake.loadNextReturnsOnCall = make(map[int]struct {
			result1 *mirbftpb.Persistent
			result2 error
		})
	}
	fake.loadNextReturnsOnCall[i] = struct {
		result1 *mirbftpb.Persistent
		result2 error
	}{result1, result2}
}

func (fake *Storage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadNextMutex.RLock()
	defer fake.loadNextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Storage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mirbft.Storage = new(Storage)
