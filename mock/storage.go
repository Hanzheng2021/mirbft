// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/IBM/mirbft"
	"github.com/IBM/mirbft/mirbftpb"
)

type Storage struct {
	LoadStub        func(uint64) (*mirbftpb.Persisted, error)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 uint64
	}
	loadReturns struct {
		result1 *mirbftpb.Persisted
		result2 error
	}
	loadReturnsOnCall map[int]struct {
		result1 *mirbftpb.Persisted
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Storage) Load(arg1 uint64) (*mirbftpb.Persisted, error) {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 uint64
	}{arg1})
	fake.recordInvocation("Load", []interface{}{arg1})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Storage) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *Storage) LoadCalls(stub func(uint64) (*mirbftpb.Persisted, error)) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *Storage) LoadArgsForCall(i int) uint64 {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	argsForCall := fake.loadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Storage) LoadReturns(result1 *mirbftpb.Persisted, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 *mirbftpb.Persisted
		result2 error
	}{result1, result2}
}

func (fake *Storage) LoadReturnsOnCall(i int, result1 *mirbftpb.Persisted, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 *mirbftpb.Persisted
			result2 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 *mirbftpb.Persisted
		result2 error
	}{result1, result2}
}

func (fake *Storage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Storage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mirbft.Storage = new(Storage)
